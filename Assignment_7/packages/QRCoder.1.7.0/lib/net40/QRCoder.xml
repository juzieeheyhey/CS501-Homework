<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QRCoder</name>
    </assembly>
    <members>
        <member name="T:QRCoder.AbstractQRCode">
            <summary>
            Abstract base class for generating QR codes. 
            Derived classes typically render a QR code into a specific format (png, System.Drawing.Bitmap, PDF, etc).
            </summary>
        </member>
        <member name="P:QRCoder.AbstractQRCode.QrCodeData">
            <summary>
            Gets or sets the QRCodeData used to generate the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.AbstractQRCode.#ctor">
            <summary>
            Initializes a new instance of the AbstractQRCode class.
            </summary>
        </member>
        <member name="M:QRCoder.AbstractQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the AbstractQRCode class with the specified QRCodeData.
            </summary>
            <param name="data">The QRCodeData object generated by QRCodeGenerator.CreateQrCode().</param>
        </member>
        <member name="M:QRCoder.AbstractQRCode.SetQRCodeData(QRCoder.QRCodeData)">
            <summary>
            Sets the QRCodeData object that will be used to generate the QR code. 
            This method is useful for COM objects connections.
            </summary>
            <param name="data">The QRCodeData object generated by QRCodeGenerator.CreateQrCode().</param>
        </member>
        <member name="M:QRCoder.AbstractQRCode.Dispose">
            <summary>
            Disposes the QRCodeData object.
            </summary>
        </member>
        <member name="T:QRCoder.ArtQRCode">
            <summary>
            Represents an art-style QR code generator that provides functionality to render QR codes with dots as modules.
            </summary>
        </member>
        <member name="M:QRCoder.ArtQRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.ArtQRCode"/> class.
            Constructor without params to be used in COM Objects connections
            </summary>
        </member>
        <member name="M:QRCoder.ArtQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.ArtQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the <see cref="T:QRCoder.QRCodeGenerator"/>.</param>
        </member>
        <member name="M:QRCoder.ArtQRCode.GetGraphic(System.Int32)">
            <summary>
            Renders an art-style QR code with dots as modules. (With default settings: DarkColor=Black, LightColor=White, Background=Transparent, QuietZone=true)
            </summary>
            <param name="pixelsPerModule">Amount of px each dark/light module of the QR code shall take place in the final QR code image</param>
            <returns>QRCode graphic as bitmap</returns>
        </member>
        <member name="M:QRCoder.ArtQRCode.GetGraphic(System.Drawing.Bitmap)">
            <summary>
            Renders an art-style QR code with dots as modules and a background image (With default settings: DarkColor=Black, LightColor=White, Background=Transparent, QuietZone=true)
            </summary>
            <param name="backgroundImage">A bitmap object that will be used as background picture</param>
            <returns>QRCode graphic as bitmap</returns>
        </member>
        <member name="M:QRCoder.ArtQRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap,System.Double,System.Boolean,QRCoder.ArtQRCode.QuietZoneStyle,QRCoder.ArtQRCode.BackgroundImageStyle,System.Drawing.Bitmap)">
            <summary>
            Renders an art-style QR code with dots as modules and various user settings
            </summary>
            <param name="pixelsPerModule">Amount of px each dark/light module of the QR code shall take place in the final QR code image</param>
            <param name="darkColor">Color of the dark modules</param>
            <param name="lightColor">Color of the light modules</param>
            <param name="backgroundColor">Color of the background</param>
            <param name="backgroundImage">A bitmap object that will be used as background picture</param>
            <param name="pixelSizeFactor">Value between 0.0 to 1.0 that defines how big the module dots are. The bigger the value, the less round the dots will be.</param>
            <param name="drawQuietZones">If true a white border is drawn around the whole QR Code</param>
            <param name="quietZoneRenderingStyle">Style of the quiet zones</param>
            <param name="backgroundImageStyle">Style of the background image (if set). Fill=spanning complete graphic; DataAreaOnly=Don't paint background into quietzone</param>
            <param name="finderPatternImage">Optional image that should be used instead of the default finder patterns</param>
            <returns>QRCode graphic as bitmap</returns>
        </member>
        <member name="M:QRCoder.ArtQRCode.MakeDotPixel(System.Int32,System.Int32,System.Drawing.SolidBrush)">
            <summary>
            If the pixelSize is bigger than the pixelsPerModule or may end up filling the Module making a traditional QR code.
            </summary>
            <param name="pixelsPerModule">Pixels used per module rendered</param>
            <param name="pixelSize">Size of the dots</param>
            <param name="brush">Color of the pixels</param>
            <returns></returns>
        </member>
        <member name="M:QRCoder.ArtQRCode.IsPartOfQuietZone(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if a given module(-position) is part of the quietzone of a QR code
            </summary>
            <param name="x">X position</param>
            <param name="y">Y position</param>
            <param name="numModules">Total number of modules per row</param>
            <returns>true, if position is part of quiet zone</returns>
        </member>
        <member name="M:QRCoder.ArtQRCode.IsPartOfFinderPattern(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if a given module(-position) is part of one of the three finder patterns of a QR code
            </summary>
            <param name="x">X position</param>
            <param name="y">Y position</param>
            <param name="numModules">Total number of modules per row</param>
            <param name="offset">Offset in modules (usually depending on drawQuietZones parameter)</param>
            <returns>true, if position is part of any finder pattern</returns>
        </member>
        <member name="M:QRCoder.ArtQRCode.Resize(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Resize to a square bitmap, but maintain the aspect ratio by padding transparently.
            </summary>
            <param name="image"></param>
            <param name="newSize"></param>
            <returns>Resized image as bitmap</returns>
        </member>
        <member name="T:QRCoder.ArtQRCode.QuietZoneStyle">
            <summary>
            Defines how the quiet zones shall be rendered.
            </summary>
        </member>
        <member name="F:QRCoder.ArtQRCode.QuietZoneStyle.Dotted">
            <summary>
            Quiet zones are rendered with dotted modules.
            </summary>
        </member>
        <member name="F:QRCoder.ArtQRCode.QuietZoneStyle.Flat">
            <summary>
            Quiet zones are rendered with flat, solid modules.
            </summary>
        </member>
        <member name="T:QRCoder.ArtQRCode.BackgroundImageStyle">
            <summary>
            Defines how the background image (if set) shall be rendered.
            </summary>
        </member>
        <member name="F:QRCoder.ArtQRCode.BackgroundImageStyle.Fill">
            <summary>
            Background image spans the complete graphic.
            </summary>
        </member>
        <member name="F:QRCoder.ArtQRCode.BackgroundImageStyle.DataAreaOnly">
            <summary>
            Background image is only painted in the data area, excluding the quiet zone.
            </summary>
        </member>
        <member name="T:QRCoder.ArtQRCodeHelper">
            <summary>
            Provides static methods for creating art-style QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.ArtQRCodeHelper.GetQRCode(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.Drawing.Bitmap,System.Double,System.Boolean,QRCoder.ArtQRCode.QuietZoneStyle,QRCoder.ArtQRCode.BackgroundImageStyle,System.Drawing.Bitmap)">
            <summary>
            Helper function to create an ArtQRCode graphic with a single function call
            </summary>
            <param name="plainText">Text/payload to be encoded inside the QR code</param>
            <param name="pixelsPerModule">Amount of px each dark/light module of the QR code shall take place in the final QR code image</param>
            <param name="darkColor">Color of the dark modules</param>
            <param name="lightColor">Color of the light modules</param>
            <param name="backgroundColor">Color of the background</param>
            <param name="eccLevel">The level of error correction data</param>
            <param name="forceUtf8">Shall the generator be forced to work in UTF-8 mode?</param>
            <param name="utf8BOM">Should the byte-order-mark be used?</param>
            <param name="eciMode">Which ECI mode shall be used?</param>
            <param name="requestedVersion">Set fixed QR code target version.</param>
            <param name="backgroundImage">A bitmap object that will be used as background picture</param>
            <param name="pixelSizeFactor">Value between 0.0 to 1.0 that defines how big the module dots are. The bigger the value, the less round the dots will be.</param>
            <param name="drawQuietZones">If true a white border is drawn around the whole QR Code</param>
            <param name="quietZoneRenderingStyle">Style of the quiet zones</param>
            <param name="backgroundImageStyle">Style of the background image (if set). Fill=spanning complete graphic; DataAreaOnly=Don't paint background into quietzone</param>
            <param name="finderPatternImage">Optional image that should be used instead of the default finder patterns</param>
            <returns>QRCode graphic as bitmap</returns>
        </member>
        <member name="T:QRCoder.AsciiQRCode">
            <summary>
            Represents an ASCII-style QR code generator that provides functionality to render QR codes as textual representations.
            </summary>
        </member>
        <member name="M:QRCoder.AsciiQRCode.#ctor">
            <summary>
            Constructor without params to be used in COM Objects connections
            </summary>
        </member>
        <member name="M:QRCoder.AsciiQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.AsciiQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data">The QR code data generated by the <see cref="T:QRCoder.QRCodeGenerator"/>.</param>
        </member>
        <member name="M:QRCoder.AsciiQRCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Returns a strings that contains the resulting QR code as textual representation.
            </summary>
            <param name="repeatPerModule">Number of repeated darkColorString/whiteSpaceString per module.</param>
            <param name="darkColorString">String for use as dark color modules. In case of string make sure whiteSpaceString has the same length.</param>
            <param name="whiteSpaceString">String for use as white modules (whitespace). In case of string make sure darkColorString has the same length.</param>
            <param name="drawQuietZones">Bool that defines if quiet zones around the QR code shall be drawn</param>
            <param name="endOfLine">End of line separator. (Default: \n)</param>
            <returns></returns>
        </member>
        <member name="M:QRCoder.AsciiQRCode.GetLineByLineGraphic(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Returns an array of strings that contains each line of the resulting QR code as ASCII chars.
            </summary>
            <param name="repeatPerModule">Number of repeated darkColorString/whiteSpaceString per module.</param>
            <param name="darkColorString">String for use as dark color modules. In case of string make sure whiteSpaceString has the same length.</param>
            <param name="whiteSpaceString">String for use as white modules (whitespace). In case of string make sure darkColorString has the same length.</param>
            <param name="drawQuietZones">Bool that defines if quiet zones around the QR code shall be drawn</param>
            <returns></returns>
        </member>
        <member name="M:QRCoder.AsciiQRCode.GetGraphicSmall(System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a strings that contains the resulting QR code as minified textual representation.
            </summary>
            <param name="drawQuietZones">Bool that defines if quiet zones around the QR code shall be drawn</param>
            <param name="invert">If set to true, dark and light colors will be inverted</param>
            <param name="endOfLine">End of line separator. (Default: \n)</param>
            <returns></returns>
        </member>
        <member name="T:QRCoder.AsciiQRCodeHelper">
            <summary>
            Provides static methods for generating ASCII-style QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.AsciiQRCodeHelper.GetQRCode(System.String,System.Int32,System.String,System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.String,System.Boolean)">
            <summary>
            Generates an ASCII QR code graphic with specified parameters.
            </summary>
            <param name="plainText">The text to be encoded in the QR code.</param>
            <param name="pixelsPerModule">Number of repeated characters per module.</param>
            <param name="darkColorString">String representing dark modules.</param>
            <param name="whiteSpaceString">String representing light modules.</param>
            <param name="eccLevel">Error correction level for the QR code.</param>
            <param name="forceUtf8">Force UTF-8 encoding.</param>
            <param name="utf8BOM">Include UTF-8 byte order mark.</param>
            <param name="eciMode">Extended Channel Interpretation mode.</param>
            <param name="requestedVersion">Specific QR code version to use.</param>
            <param name="endOfLine">End of line separator.</param>
            <param name="drawQuietZones">Include quiet zones around the QR code.</param>
            <returns>ASCII representation of the QR code.</returns>
        </member>
        <member name="M:QRCoder.AsciiQRCodeHelper.GetQRCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Generates a small ASCII QR code graphic with specified parameters.
            </summary>
            <param name="plainText">The text to be encoded in the QR code.</param>
            <param name="eccLevel">Error correction level for the QR code.</param>
            <param name="forceUtf8">Force UTF-8 encoding.</param>
            <param name="utf8BOM">Include UTF-8 byte order mark.</param>
            <param name="eciMode">Extended Channel Interpretation mode.</param>
            <param name="requestedVersion">Specific QR code version to use.</param>
            <param name="endOfLine">End of line separator.</param>
            <param name="drawQuietZones">Include quiet zones around the QR code.</param>
            <param name="invert">Invert dark and light colors.</param>
            <returns>Minified ASCII representation of the QR code.</returns>
        </member>
        <member name="T:QRCoder.Base64QRCode">
            <summary>
            Represents a QR code generator that outputs base64-encoded images.
            </summary>
        </member>
        <member name="M:QRCoder.Base64QRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.Base64QRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.Base64QRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.Base64QRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.Base64QRCode.GetGraphic(System.Int32)">
            <summary>
            Returns a base64-encoded string that contains the resulting QR code as a PNG image.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        </member>
        <member name="M:QRCoder.Base64QRCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,QRCoder.Base64QRCode.ImageType)">
            <summary>
            Returns a base64-encoded string that contains the resulting QR code as an image.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
            <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        </member>
        <member name="M:QRCoder.Base64QRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,QRCoder.Base64QRCode.ImageType)">
            <summary>
            Returns a base64-encoded string that contains the resulting QR code as an image.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
            <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        </member>
        <member name="M:QRCoder.Base64QRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean,QRCoder.Base64QRCode.ImageType)">
            <summary>
            Returns a base64-encoded string that contains the resulting QR code as an image with an embedded icon.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="icon">The icon to embed in the center of the QR code.</param>
            <param name="iconSizePercent">The size of the icon as a percentage of the QR code.</param>
            <param name="iconBorderWidth">The width of the border around the icon.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
            <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        </member>
        <member name="M:QRCoder.Base64QRCode.BitmapToBase64(System.Drawing.Bitmap,QRCoder.Base64QRCode.ImageType)">
            <summary>
            Converts a bitmap to a base64-encoded string.
            </summary>
            <param name="bmp">The bitmap to convert.</param>
            <param name="imgType">The type of image (PNG, JPEG, GIF).</param>
            <returns>Returns the base64-encoded string representation of the bitmap.</returns>
        </member>
        <member name="T:QRCoder.Base64QRCode.ImageType">
            <summary>
            Specifies the type of image to generate.
            </summary>
        </member>
        <member name="F:QRCoder.Base64QRCode.ImageType.Gif">
            <summary>
            Graphics Interchange Format (GIF) image format, a bitmap image format with limited color support
            </summary>
        </member>
        <member name="F:QRCoder.Base64QRCode.ImageType.Jpeg">
            <summary>
            Joint Photographic Experts Group (JPEG) image format, a lossy compressed image format
            </summary>
        </member>
        <member name="F:QRCoder.Base64QRCode.ImageType.Png">
            <summary>
            Portable Network Graphics (PNG) image format, a lossless raster graphics format
            </summary>
        </member>
        <member name="T:QRCoder.Base64QRCodeHelper">
            <summary>
            Provides static methods for creating base64-encoded QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.Base64QRCodeHelper.GetQRCode(System.String,System.Int32,System.String,System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.Boolean,QRCoder.Base64QRCode.ImageType)">
            <summary>
            Creates a base64-encoded QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
            <returns>Returns the QR code graphic as a base64-encoded string.</returns>
        </member>
        <member name="T:QRCoder.BitmapByteQRCode">
            <summary>
            Represents a QR code generator that outputs QR codes as bitmap byte arrays.
            </summary>
        </member>
        <member name="M:QRCoder.BitmapByteQRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.BitmapByteQRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.BitmapByteQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.BitmapByteQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.BitmapByteQRCode.GetGraphic(System.Int32)">
            <summary>
            Returns the QR code graphic as a bitmap byte array.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <returns>Returns the QR code graphic as a bitmap byte array.</returns>
        </member>
        <member name="M:QRCoder.BitmapByteQRCode.GetGraphic(System.Int32,System.String,System.String)">
            <summary>
            Returns the QR code graphic as a bitmap byte array.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <returns>Returns the QR code graphic as a bitmap byte array.</returns>
        </member>
        <member name="M:QRCoder.BitmapByteQRCode.GetGraphic(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Returns the QR code graphic as a bitmap byte array.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorRgb">The color of the dark modules as an RGB byte array.</param>
            <param name="lightColorRgb">The color of the light modules as an RGB byte array.</param>
            <returns>Returns the QR code graphic as a bitmap byte array.</returns>
        </member>
        <member name="M:QRCoder.BitmapByteQRCode.CopyIntAs4ByteToArray(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Converts an integer to a 4 bytes and writes them to a byte array at given position
            </summary>
            <param name="inp">The integer to convert.</param>
            <param name="destinationIndex">Index of destinationArray where the converted bytes are written to</param>
            <param name="destinationArray">Destination byte array that receives the bytes</param>
        </member>
        <member name="T:QRCoder.BitmapByteQRCodeHelper">
            <summary>
            Provides helper functions for creating bitmap byte array QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.BitmapByteQRCodeHelper.GetQRCode(System.String,System.Int32,System.String,System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Creates a bitmap byte array QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <returns>Returns the QR code graphic as a bitmap byte array.</returns>
        </member>
        <member name="M:QRCoder.BitmapByteQRCodeHelper.GetQRCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            Creates a bitmap byte array QR code with a single function call.
            </summary>
            <param name="txt">The text or payload to be encoded inside the QR code.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="size">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <returns>Returns the QR code graphic as a bitmap byte array.</returns>
        </member>
        <member name="T:QRCoder.Exceptions.DataTooLongException">
            <summary>
            Exception thrown when the given payload exceeds the maximum size of the QR code standard.
            </summary>
        </member>
        <member name="M:QRCoder.Exceptions.DataTooLongException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.Exceptions.DataTooLongException"/> class with a specified error message.
            </summary>
            <param name="eccLevel">The error correction level of the QR code.</param>
            <param name="encodingMode">The encoding mode of the QR code.</param>
            <param name="maxSizeByte">The maximum size allowed for the given parameters in bytes.</param>
        </member>
        <member name="M:QRCoder.Exceptions.DataTooLongException.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.Exceptions.DataTooLongException"/> class with a specified error message.
            </summary>
            <param name="eccLevel">The error correction level of the QR code.</param>
            <param name="encodingMode">The encoding mode of the QR code.</param>
            <param name="version">The fixed version of the QR code.</param>
            <param name="maxSizeByte">The maximum size allowed for the given parameters in bytes.</param>
        </member>
        <member name="T:QRCoder.BitArrayExtensions">
            <summary>
            Helper methods for <see cref="T:System.Collections.BitArray"/>.
            </summary>
        </member>
        <member name="M:QRCoder.BitArrayExtensions.CopyTo(System.Collections.BitArray,System.Collections.BitArray,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a specified number of elements from one <see cref="T:System.Collections.BitArray"/> to another starting at the specified offsets.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.BitArray"/> from which elements will be copied.</param>
            <param name="sourceOffset">The zero-based index in the source <see cref="T:System.Collections.BitArray"/> at which copying begins.</param>
            <param name="destination">The destination <see cref="T:System.Collections.BitArray"/> to which elements will be copied.</param>
            <param name="destinationOffset">The zero-based index in the destination <see cref="T:System.Collections.BitArray"/> at which storing begins.</param>
            <param name="count">The number of elements to copy.</param>
            <returns>The index in the destination <see cref="T:System.Collections.BitArray"/> immediately following the last copied element.</returns>
        </member>
        <member name="M:QRCoder.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether the specified string is null, empty, or consists only of white-space characters.
            </summary>
            <returns>
              <see langword="true"/> if the <paramref name="value"/> is null, empty, or white space; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:QRCoder.StringExtensions.HexColorToByteArray(System.String)">
            <summary>
            Converts a hex color string to a byte array.
            </summary>
            <param name="colorString">Color in HEX format like #ffffff.</param>
            <returns>Returns the color as a byte array.</returns>
        </member>
        <member name="M:QRCoder.StringExtensions.AppendInvariant(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends an integer value to the StringBuilder using invariant culture formatting.
            </summary>
            <param name="sb">The StringBuilder to append to.</param>
            <param name="num">The integer value to append.</param>
        </member>
        <member name="M:QRCoder.StringExtensions.AppendInvariant(System.Text.StringBuilder,System.Single)">
            <summary>
            Appends a float value to the StringBuilder using invariant culture formatting with G7 precision.
            </summary>
            <param name="sb">The StringBuilder to append to.</param>
            <param name="num">The float value to append.</param>
        </member>
        <member name="T:QRCoder.Extensions.StringValueAttribute">
            <summary>
            Used to represent a string value for a value in an enum
            </summary>
        </member>
        <member name="P:QRCoder.Extensions.StringValueAttribute.StringValue">
            <summary>
            Holds the alue in an enum
            </summary>
        </member>
        <member name="M:QRCoder.Extensions.StringValueAttribute.#ctor(System.String)">
            <summary>
            Init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:QRCoder.Extensions.CustomExtensions">
            <summary>
            Enumeration extension methods.
            </summary>
        </member>
        <member name="M:QRCoder.Extensions.CustomExtensions.GetStringValue(System.Enum)">
            <summary>
            Will get the string value for a given enum's value
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator">
            <summary>
            Provides utility methods for generating QR code payloads.
            </summary>
            <summary>
            Contains classes and methods for generating payloads for QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.IsValidIban(System.String)">
            <summary>
            Validates the structure and checksum of an IBAN.
            </summary>
            <param name="iban">The IBAN to validate.</param>
            <returns>True if the IBAN is valid; otherwise, false.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.IsValidQRIban(System.String)">
            <summary>
            Validates the structure and checksum of a QR IBAN.
            </summary>
            <param name="iban">The QR IBAN to validate.</param>
            <returns>True if the QR IBAN is valid; otherwise, false.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.IsValidBic(System.String)">
            <summary>
            Validates the structure of a BIC.
            </summary>
            <param name="bic">The BIC to validate.</param>
            <returns>True if the BIC is valid; otherwise, false.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.IsValidBic(System.String,System.Boolean)">
            <summary>
            Validates the structure of a BIC with optional requirement check.
            </summary>
            <param name="bic">The BIC to validate.</param>
            <param name="required">Whether the BIC is required. If false, null/empty values are considered valid.</param>
            <returns>True if the BIC is valid; otherwise, false.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ConvertStringToEncoding(System.String,System.String)">
            <summary>
            Converts a string to a specified encoding.
            </summary>
            <param name="message">The string to convert.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.EscapeInput(System.String,System.Boolean)">
            <summary>
            Escapes forbidden characters in a string.
            </summary>
            <param name="inp">The input string.</param>
            <param name="simple">Indicates whether to use a simple escape mode.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ChecksumMod10(System.String)">
            <summary>
            Validates a string using the Mod10 checksum algorithm.
            </summary>
            <param name="digits">The string to validate.</param>
            <returns>True if the string is valid; otherwise, false.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.isHexStyle(System.String)">
            <summary>
            Checks if a string is in hexadecimal format.
            </summary>
            <param name="inp">The input string.</param>
            <returns>True if the string is in hexadecimal format; otherwise, false.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BezahlCode">
            <summary>
            Represents a BezahlCode payload for QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.#ctor(QRCoder.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BezahlCode"/> class for contact data.
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="account">Bank account (Kontonummer)</param>
            <param name="bnc">Bank institute (Bankleitzahl)</param>
            <param name="iban">IBAN</param>
            <param name="bic">BIC</param>
            <param name="reason">Reason (Verwendungszweck)</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.#ctor(QRCoder.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.Decimal,System.String,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Int32,QRCoder.PayloadGenerator.BezahlCode.Currency,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BezahlCode"/> class for non-SEPA payments.
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="account">Bank account (Kontonummer)</param>
            <param name="bnc">Bank institute (Bankleitzahl)</param>
            <param name="amount">Amount (Betrag)</param>
            <param name="periodicTimeunit">Unit of intervall for payment ('M' = monthly, 'W' = weekly)</param>
            <param name="periodicTimeunitRotation">Intervall for payment. This value is combined with 'periodicTimeunit'</param>
            <param name="periodicFirstExecutionDate">Date of first periodic execution</param>
            <param name="periodicLastExecutionDate">Date of last periodic execution</param>
            <param name="reason">Reason (Verwendungszweck)</param>
            <param name="postingKey">Transfer Key (Textschlüssel, z.B. Spendenzahlung = 69)</param>
            <param name="currency">Currency (Währung)</param>
            <param name="executionDate">Execution date (Ausführungsdatum)</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.#ctor(QRCoder.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.Decimal,System.String,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,QRCoder.PayloadGenerator.BezahlCode.Currency,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BezahlCode"/> class for SEPA payments.
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="iban">IBAN</param>
            <param name="bic">BIC</param>
            <param name="amount">Amount (Betrag)</param>
            <param name="periodicTimeunit">Unit of intervall for payment ('M' = monthly, 'W' = weekly)</param>
            <param name="periodicTimeunitRotation">Intervall for payment. This value is combined with 'periodicTimeunit'</param>
            <param name="periodicFirstExecutionDate">Date of first periodic execution</param>
            <param name="periodicLastExecutionDate">Date of last periodic execution</param>
            <param name="creditorId">Creditor id (Gläubiger ID)</param>
            <param name="mandateId">Manadate id (Mandatsreferenz)</param>
            <param name="dateOfSignature">Signature date (Erteilungsdatum des Mandats)</param>
            <param name="reason">Reason (Verwendungszweck)</param>
            <param name="sepaReference">SEPA reference (SEPA-Referenz)</param>
            <param name="currency">Currency (Währung)</param>
            <param name="executionDate">Execution date (Ausführungsdatum)</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.#ctor(QRCoder.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.String,System.Int32,System.String,QRCoder.PayloadGenerator.BezahlCode.Currency,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Generic constructor. Please use specific (non-SEPA or SEPA) constructor.
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="account">Bank account (Kontonummer)</param>
            <param name="bnc">Bank institute (Bankleitzahl)</param>
            <param name="iban">IBAN</param>
            <param name="bic">BIC</param>
            <param name="amount">Amount (Betrag)</param>
            <param name="periodicTimeunit">Unit of intervall for payment ('M' = monthly, 'W' = weekly)</param>
            <param name="periodicTimeunitRotation">Intervall for payment. This value is combined with 'periodicTimeunit'</param>
            <param name="periodicFirstExecutionDate">Date of first periodic execution</param>
            <param name="periodicLastExecutionDate">Date of last periodic execution</param>
            <param name="creditorId">Creditor id (Gläubiger ID)</param>
            <param name="mandateId">Manadate id (Mandatsreferenz)</param>
            <param name="dateOfSignature">Signature date (Erteilungsdatum des Mandats)</param>
            <param name="reason">Reason (Verwendungszweck)</param>
            <param name="postingKey">Transfer Key (Textschlüssel, z.B. Spendenzahlung = 69)</param>
            <param name="sepaReference">SEPA reference (SEPA-Referenz)</param>
            <param name="currency">Currency (Währung)</param>
            <param name="executionDate">Execution date (Ausführungsdatum)</param>
            <param name="internalMode">Only used for internal state handdling</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BezahlCode.Currency">
            <summary>
            ISO 4217 currency codes
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AED">
            <summary>
            United Arab Emirates Dirham
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AFN">
            <summary>
            Afghan Afghani
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ALL">
            <summary>
            Albanian Lek
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AMD">
            <summary>
            Armenian Dram
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ANG">
            <summary>
            Netherlands Antillean Guilder
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AOA">
            <summary>
            Angolan Kwanza
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ARS">
            <summary>
            Argentine Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AUD">
            <summary>
            Australian Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AWG">
            <summary>
            Aruban Florin
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.AZN">
            <summary>
            Azerbaijani Manat
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BAM">
            <summary>
            Bosnia and Herzegovina Convertible Mark
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BBD">
            <summary>
            Barbados Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BDT">
            <summary>
            Bangladeshi Taka
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BGN">
            <summary>
            Bulgarian Lev
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BHD">
            <summary>
            Bahraini Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BIF">
            <summary>
            Burundian Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BMD">
            <summary>
            Bermudian Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BND">
            <summary>
            Brunei Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BOB">
            <summary>
            Bolivian Boliviano
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BOV">
            <summary>
            Bolivian Mvdol (funds code)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BRL">
            <summary>
            Brazilian Real
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BSD">
            <summary>
            Bahamian Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BTN">
            <summary>
            Bhutanese Ngultrum
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BWP">
            <summary>
            Botswana Pula
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BYR">
            <summary>
            Belarusian Ruble
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.BZD">
            <summary>
            Belize Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CAD">
            <summary>
            Canadian Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CDF">
            <summary>
            Congolese Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CHE">
            <summary>
            WIR Euro (complementary currency)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CHF">
            <summary>
            Swiss Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CHW">
            <summary>
            WIR Franc (complementary currency)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CLF">
            <summary>
            Unidad de Fomento (funds code)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CLP">
            <summary>
            Chilean Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CNY">
            <summary>
            Chinese Yuan
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.COP">
            <summary>
            Colombian Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.COU">
            <summary>
            Unidad de Valor Real (UVR) (funds code)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CRC">
            <summary>
            Costa Rican Colón
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CUC">
            <summary>
            Cuban Convertible Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CUP">
            <summary>
            Cuban Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CVE">
            <summary>
            Cape Verde Escudo
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.CZK">
            <summary>
            Czech Koruna
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.DJF">
            <summary>
            Djiboutian Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.DKK">
            <summary>
            Danish Krone
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.DOP">
            <summary>
            Dominican Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.DZD">
            <summary>
            Algerian Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.EGP">
            <summary>
            Egyptian Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ERN">
            <summary>
            Eritrean Nakfa
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ETB">
            <summary>
            Ethiopian Birr
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.EUR">
            <summary>
            Euro
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.FJD">
            <summary>
            Fiji Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.FKP">
            <summary>
            Falkland Islands Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GBP">
            <summary>
            Pound Sterling
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GEL">
            <summary>
            Georgian Lari
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GHS">
            <summary>
            Ghanaian Cedi
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GIP">
            <summary>
            Gibraltar Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GMD">
            <summary>
            Gambian Dalasi
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GNF">
            <summary>
            Guinean Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GTQ">
            <summary>
            Guatemalan Quetzal
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.GYD">
            <summary>
            Guyanese Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.HKD">
            <summary>
            Hong Kong Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.HNL">
            <summary>
            Honduran Lempira
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.HRK">
            <summary>
            Croatian Kuna
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.HTG">
            <summary>
            Haitian Gourde
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.HUF">
            <summary>
            Hungarian Forint
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.IDR">
            <summary>
            Indonesian Rupiah
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ILS">
            <summary>
            Israeli New Shekel
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.INR">
            <summary>
            Indian Rupee
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.IQD">
            <summary>
            Iraqi Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.IRR">
            <summary>
            Iranian Rial
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ISK">
            <summary>
            Icelandic Króna
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.JMD">
            <summary>
            Jamaican Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.JOD">
            <summary>
            Jordanian Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.JPY">
            <summary>
            Japanese Yen
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KES">
            <summary>
            Kenyan Shilling
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KGS">
            <summary>
            Kyrgyzstani Som
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KHR">
            <summary>
            Cambodian Riel
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KMF">
            <summary>
            Comoro Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KPW">
            <summary>
            North Korean Won
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KRW">
            <summary>
            South Korean Won
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KWD">
            <summary>
            Kuwaiti Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KYD">
            <summary>
            Cayman Islands Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.KZT">
            <summary>
            Kazakhstani Tenge
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.LAK">
            <summary>
            Lao Kip
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.LBP">
            <summary>
            Lebanese Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.LKR">
            <summary>
            Sri Lankan Rupee
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.LRD">
            <summary>
            Liberian Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.LSL">
            <summary>
            Lesotho Loti
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.LYD">
            <summary>
            Libyan Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MAD">
            <summary>
            Moroccan Dirham
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MDL">
            <summary>
            Moldovan Leu
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MGA">
            <summary>
            Malagasy Ariary
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MKD">
            <summary>
            Macedonian Denar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MMK">
            <summary>
            Myanmar Kyat
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MNT">
            <summary>
            Mongolian Tögrög
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MOP">
            <summary>
            Macanese Pataca
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MRO">
            <summary>
            Mauritanian Ouguiya
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MUR">
            <summary>
            Mauritian Rupee
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MVR">
            <summary>
            Maldivian Rufiyaa
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MWK">
            <summary>
            Malawian Kwacha
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MXN">
            <summary>
            Mexican Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MXV">
            <summary>
            Mexican Unidad de Inversión (UDI) (funds code)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MYR">
            <summary>
            Malaysian Ringgit
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.MZN">
            <summary>
            Mozambican Metical
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.NAD">
            <summary>
            Namibian Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.NGN">
            <summary>
            Nigerian Naira
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.NIO">
            <summary>
            Nicaraguan Córdoba
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.NOK">
            <summary>
            Norwegian Krone
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.NPR">
            <summary>
            Nepalese Rupee
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.NZD">
            <summary>
            New Zealand Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.OMR">
            <summary>
            Omani Rial
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PAB">
            <summary>
            Panamanian Balboa
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PEN">
            <summary>
            Peruvian Sol
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PGK">
            <summary>
            Papua New Guinean Kina
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PHP">
            <summary>
            Philippine Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PKR">
            <summary>
            Pakistani Rupee
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PLN">
            <summary>
            Polish Złoty
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.PYG">
            <summary>
            Paraguayan Guaraní
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.QAR">
            <summary>
            Qatari Riyal
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.RON">
            <summary>
            Romanian Leu
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.RSD">
            <summary>
            Serbian Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.RUB">
            <summary>
            Russian Ruble
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.RWF">
            <summary>
            Rwandan Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SAR">
            <summary>
            Saudi Riyal
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SBD">
            <summary>
            Solomon Islands Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SCR">
            <summary>
            Seychelles Rupee
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SDG">
            <summary>
            Sudanese Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SEK">
            <summary>
            Swedish Krona
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SGD">
            <summary>
            Singapore Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SHP">
            <summary>
            Saint Helena Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SLL">
            <summary>
            Sierra Leonean Leone
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SOS">
            <summary>
            Somali Shilling
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SRD">
            <summary>
            Surinamese Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SSP">
            <summary>
            South Sudanese Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.STD">
            <summary>
            São Tomé and Príncipe Dobra
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SVC">
            <summary>
            Salvadoran Colón
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SYP">
            <summary>
            Syrian Pound
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.SZL">
            <summary>
            Swazi Lilangeni
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.THB">
            <summary>
            Thai Baht
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TJS">
            <summary>
            Tajikistani Somoni
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TMT">
            <summary>
            Turkmenistan Manat
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TND">
            <summary>
            Tunisian Dinar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TOP">
            <summary>
            Tongan Paʻanga
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TRY">
            <summary>
            Turkish Lira
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TTD">
            <summary>
            Trinidad and Tobago Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TWD">
            <summary>
            New Taiwan Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.TZS">
            <summary>
            Tanzanian Shilling
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.UAH">
            <summary>
            Ukrainian Hryvnia
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.UGX">
            <summary>
            Ugandan Shilling
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.USD">
            <summary>
            United States Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.USN">
            <summary>
            United States Dollar (Next day) (funds code)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.UYI">
            <summary>
            Uruguay Peso en Unidades Indexadas (URUIURUI) (funds code)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.UYU">
            <summary>
            Uruguayan Peso
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.UZS">
            <summary>
            Uzbekistan Som
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.VEF">
            <summary>
            Venezuelan Bolívar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.VND">
            <summary>
            Vietnamese Đồng
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.VUV">
            <summary>
            Vanuatu Vatu
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.WST">
            <summary>
            Samoan Tālā
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XAF">
            <summary>
            CFA Franc BEAC
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XAG">
            <summary>
            Silver (one troy ounce)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XAU">
            <summary>
            Gold (one troy ounce)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XBA">
            <summary>
            Bond Markets Unit European Composite Unit (EURCO)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XBB">
            <summary>
            Bond Markets Unit European Monetary Unit (E.M.U.-6)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XBC">
            <summary>
            Bond Markets Unit European Unit of Account 9 (E.U.A.-9)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XBD">
            <summary>
            Bond Markets Unit European Unit of Account 17 (E.U.A.-17)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XCD">
            <summary>
            East Caribbean Dollar
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XDR">
            <summary>
            Special Drawing Rights
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XOF">
            <summary>
            CFA Franc BCEAO
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XPD">
            <summary>
            Palladium (one troy ounce)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XPF">
            <summary>
            CFP Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XPT">
            <summary>
            Platinum (one troy ounce)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XSU">
            <summary>
            SUCRE
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XTS">
            <summary>
            Codes specifically reserved for testing purposes
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XUA">
            <summary>
            ADB Unit of Account
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.XXX">
            <summary>
            The code assigned for transactions where no currency is involved
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.YER">
            <summary>
            Yemeni Rial
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ZAR">
            <summary>
            South African Rand
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ZMW">
            <summary>
            Zambian Kwacha
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.Currency.ZWL">
            <summary>
            Zimbabwean Dollar
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BezahlCode.AuthorityType">
            <summary>
            Operation modes of the BezahlCode
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.singlepayment">
            <summary>
            Single payment (Überweisung)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.singlepaymentsepa">
            <summary>
            Single SEPA payment (SEPA-Überweisung)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.singledirectdebit">
            <summary>
            Single debit (Lastschrift)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.singledirectdebitsepa">
            <summary>
            Single SEPA debit (SEPA-Lastschrift)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.periodicsinglepayment">
            <summary>
            Periodic payment (Dauerauftrag)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.periodicsinglepaymentsepa">
            <summary>
            Periodic SEPA payment (SEPA-Dauerauftrag)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.contact">
            <summary>
            Contact data
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BezahlCode.AuthorityType.contact_v2">
            <summary>
            Contact data V2
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException">
            <summary>
            Exception class for BezahlCode errors.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BezahlCode.BezahlCodeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BitcoinAddress">
            <summary>
            Generates a payload for Bitcoin payment addresses.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BitcoinAddress.#ctor(System.String,System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BitcoinAddress"/> class.
            Generates a Bitcoin payment payload. QR Codes with this payload can open a payment app.
            </summary>
            <param name="address">The Bitcoin address of the payment receiver.</param>
            <param name="amount">The amount of Bitcoin to transfer.</param>
            <param name="label">A reference label.</param>
            <param name="message">A reference text or message.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BitcoinCashAddress">
            <summary>
            Generates a payload for Bitcoin Cash payment addresses.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BitcoinCashAddress.#ctor(System.String,System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BitcoinCashAddress"/> class.
            Generates a Bitcoin Cash payment payload. QR Codes with this payload can open a payment app.
            </summary>
            <param name="address">The Bitcoin Cash address of the payment receiver.</param>
            <param name="amount">The amount of Bitcoin Cash to transfer.</param>
            <param name="label">A reference label.</param>
            <param name="message">A reference text or message.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress">
            <summary>
            Generates a payload for Bitcoin-like cryptocurrency payment addresses.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.#ctor(QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.BitcoinLikeCryptoCurrencyType,System.String,System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress"/> class.
            Generates a Bitcoin-like cryptocurrency payment payload. QR Codes with this payload can open a payment app.
            </summary>
            <param name="currencyType">The type of Bitcoin-like cryptocurrency.</param>
            <param name="address">The cryptocurrency address of the payment receiver.</param>
            <param name="amount">The amount of coins to transfer.</param>
            <param name="label">A reference label.</param>
            <param name="message">A reference text or message.</param>           
        </member>
        <member name="M:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.ToString">
            <summary>
            Returns a string representation of the Bitcoin-like cryptocurrency address payload.
            </summary>
            <returns>A string representation of the cryptocurrency address payload.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.BitcoinLikeCryptoCurrencyType">
            <summary>
            Enumerates Bitcoin-like cryptocurrencies.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.BitcoinLikeCryptoCurrencyType.Bitcoin">
            <summary>
            Bitcoin.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.BitcoinLikeCryptoCurrencyType.BitcoinCash">
            <summary>
            Bitcoin Cash.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.BitcoinLikeCryptoCurrencyAddress.BitcoinLikeCryptoCurrencyType.Litecoin">
            <summary>
            Litecoin.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Bookmark">
            <summary>
            Generates a bookmark payload. When scanned by a QR code reader, this creates a browser bookmark.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Bookmark.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Bookmark"/> class.
            </summary>
            <param name="url">The URL of the bookmark.</param>
            <param name="title">The title of the bookmark.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Bookmark.ToString">
            <summary>
            Returns a string representation of the bookmark payload.
            </summary>
            <returns>A string representation of the bookmark payload in the MEBKM format.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.CalendarEvent">
            <summary>
            Generates a calendar entry/event payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.CalendarEvent.#ctor(System.String,System.String,System.String,System.DateTimeOffset,System.DateTimeOffset,System.Boolean,QRCoder.PayloadGenerator.CalendarEvent.EventEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.CalendarEvent"/> class.
            </summary>
            <param name="subject">Subject/title of the calendar event.</param>
            <param name="description">Description of the event.</param>
            <param name="location">Location (latitude:longitude or address) of the event.</param>
            <param name="start">Start time (including UTC offset) of the event.</param>
            <param name="end">End time (including UTC offset) of the event.</param>
            <param name="allDayEvent">Indicates if it is a full day event.</param>
            <param name="encoding">Type of encoding (universal or iCal).</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.CalendarEvent.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,QRCoder.PayloadGenerator.CalendarEvent.EventEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.CalendarEvent"/> class.
            </summary>
            <param name="subject">Subject/title of the calendar event.</param>
            <param name="description">Description of the event.</param>
            <param name="location">Location (latitude:longitude or address) of the event.</param>
            <param name="start">Start time of the event.</param>
            <param name="end">End time of the event.</param>
            <param name="allDayEvent">Indicates if it is a full day event.</param>
            <param name="encoding">Type of encoding (universal or iCal).</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.CalendarEvent.ToString">
            <summary>
            Returns a string representation of the calendar event payload.
            </summary>
            <returns>A string representation of the calendar event in the VEVENT format.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.CalendarEvent.EventEncoding">
            <summary>
            Specifies the encoding type for the calendar event.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.CalendarEvent.EventEncoding.iCalComplete">
            <summary>
            iCalendar complete encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.CalendarEvent.EventEncoding.Universal">
            <summary>
            Universal encoding.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ContactData">
            <summary>
            Generates a vCard or meCard contact dataset.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ContactData.#ctor(QRCoder.PayloadGenerator.ContactData.ContactOutputType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,QRCoder.PayloadGenerator.ContactData.AddressOrder,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.ContactData"/> class.
            </summary>
            <param name="outputType">Payload output type.</param>
            <param name="firstname">The first name.</param>
            <param name="lastname">The last name.</param>
            <param name="nickname">The display name.</param>
            <param name="phone">Normal phone number.</param>
            <param name="mobilePhone">Mobile phone.</param>
            <param name="workPhone">Office phone number.</param>
            <param name="email">E-Mail address.</param>
            <param name="birthday">Birthday.</param>
            <param name="website">Website / Homepage.</param>
            <param name="street">Street.</param>
            <param name="houseNumber">House number.</param>
            <param name="city">City.</param>
            <param name="stateRegion">State or Region.</param>
            <param name="zipCode">Zip code.</param>
            <param name="country">Country.</param>
            <param name="addressOrder">The address order format to use.</param>
            <param name="note">Memo text / notes.</param>
            <param name="org">Organization/Company.</param>
            <param name="orgTitle">Organization/Company Title.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ContactData.#ctor(QRCoder.PayloadGenerator.ContactData.ContactOutputType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,QRCoder.PayloadGenerator.ContactData.AddressOrder,System.String,System.String,QRCoder.PayloadGenerator.ContactData.AddressType)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.ContactData"/> class with address type support.
            </summary>
            <param name="outputType">Payload output type.</param>
            <param name="firstname">The first name.</param>
            <param name="lastname">The last name.</param>
            <param name="nickname">The display name.</param>
            <param name="phone">Normal phone number.</param>
            <param name="mobilePhone">Mobile phone.</param>
            <param name="workPhone">Office phone number.</param>
            <param name="email">E-Mail address.</param>
            <param name="birthday">Birthday.</param>
            <param name="website">Website / Homepage.</param>
            <param name="street">Street.</param>
            <param name="houseNumber">House number.</param>
            <param name="city">City.</param>
            <param name="stateRegion">State or Region.</param>
            <param name="zipCode">Zip code.</param>
            <param name="country">Country.</param>
            <param name="addressOrder">The address order format to use.</param>
            <param name="note">Memo text / notes.</param>
            <param name="org">Organization/Company.</param>
            <param name="orgTitle">Organization/Company Title.</param>
            <param name="addressType">The address type (Home, Work, HomePreferred, or WorkPreferred).</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ContactData.ToString">
            <summary>
            Returns a string representation of the contact data payload.
            </summary>
            <returns>A string representation of the contact data in the specified format.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ContactData.GetAddressTypeString21">
            <summary>
            Gets the address type string for vCard 2.1 format.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ContactData.GetAddressTypeString3">
            <summary>
            Gets the address type string for vCard 3.0 format.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ContactData.GetAddressTypeString4">
            <summary>
            Gets the address type string for vCard 4.0 format.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ContactData.AddressType">
            <summary>
            Defines the type of address (home or work).
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.AddressType.Home">
            <summary>
            Home address.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.AddressType.Work">
            <summary>
            Work address.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.AddressType.HomePreferred">
            <summary>
            Home address marked as preferred (default for backwards compatibility).
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.AddressType.WorkPreferred">
            <summary>
            Work address marked as preferred.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ContactData.ContactOutputType">
            <summary>
            Possible output types. Either vCard 2.1, vCard 3.0, vCard 4.0 or MeCard.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.ContactOutputType.MeCard">
            <summary>
            MeCard output type.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.ContactOutputType.VCard21">
            <summary>
            vCard 2.1 output type.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.ContactOutputType.VCard3">
            <summary>
            vCard 3.0 output type.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.ContactOutputType.VCard4">
            <summary>
            vCard 4.0 output type.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ContactData.AddressOrder">
            <summary>
            Define the address format.
            Default: European format, ([Street] [House Number] and [Postal Code] [City])
            Reversed: North American and others format ([House Number] [Street] and [City] [Postal Code])
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.AddressOrder.Default">
            <summary>
            Default address order format (European format).
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ContactData.AddressOrder.Reversed">
            <summary>
            Reversed address order format (North American and others format).
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Geolocation">
            <summary>
            Generates a geo location payload. Supports raw location (GEO encoding) or Google Maps link (GoogleMaps encoding).
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Geolocation.#ctor(System.String,System.String,QRCoder.PayloadGenerator.Geolocation.GeolocationEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Geolocation"/> class.
            Supports raw location (GEO encoding) or Google Maps link (GoogleMaps encoding).
            </summary>
            <param name="latitude">Latitude with . as splitter.</param>
            <param name="longitude">Longitude with . as splitter.</param>
            <param name="encoding">Encoding type - GEO or GoogleMaps.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Geolocation.ToString">
            <summary>
            Returns a string representation of the geolocation payload.
            </summary>
            <returns>A string representation of the geolocation payload in the specified encoding format.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Geolocation.GeolocationEncoding">
            <summary>
            Defines the encoding types for geolocation payloads.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Geolocation.GeolocationEncoding.GEO">
            <summary>
            GEO encoding type.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Geolocation.GeolocationEncoding.GoogleMaps">
            <summary>
            Google Maps encoding type.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Girocode">
            <summary>
            Generates the payload for a Girocode (QR-Code with credit transfer information).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.Girocode.EccLevel">
            <summary>
            Gets the ECC level required for Girocode, which is always set to M.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Girocode.#ctor(System.String,System.String,System.String,System.Decimal,System.String,QRCoder.PayloadGenerator.Girocode.TypeOfRemittance,System.String,System.String,QRCoder.PayloadGenerator.Girocode.GirocodeVersion,QRCoder.PayloadGenerator.Girocode.GirocodeEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Girocode"/> class, which contains a payload for a Girocode (QR-Code with credit transfer information).
            </summary>
            <param name="iban">Account number of the Beneficiary. Only IBAN is allowed.</param>
            <param name="bic">BIC of the Beneficiary Bank.</param>
            <param name="name">Name of the Beneficiary.</param>
            <param name="amount">Amount of the Credit Transfer in Euro. (Amount must be more than 0.01 and less than 999999999.99)</param>
            <param name="remittanceInformation">Remittance Information (Purpose-/reference text). (optional)</param>
            <param name="typeOfRemittance">Type of remittance information. Either structured (e.g. ISO 11649 RF Creditor Reference) and max. 35 chars or unstructured and max. 140 chars.</param>
            <param name="purposeOfCreditTransfer">Purpose of the Credit Transfer (optional)</param>
            <param name="messageToGirocodeUser">Beneficiary to originator information. (optional)</param>
            <param name="version">Girocode version. Either 001 or 002. Default: 001.</param>
            <param name="encoding">Encoding of the Girocode payload. Default: ISO-8859-1</param>
            <exception cref="T:QRCoder.PayloadGenerator.Girocode.GirocodeException">Thrown when the input values are not valid according to the Girocode specification.</exception>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Girocode.ToString">
            <summary>
            Returns the Girocode payload as a string.
            </summary>
            <returns>The Girocode payload as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Girocode.GirocodeVersion">
            <summary>
            Defines the Girocode version.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeVersion.Version1">
            <summary>
            Girocode version 1.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeVersion.Version2">
            <summary>
            Girocode version 2.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Girocode.TypeOfRemittance">
            <summary>
            Defines the type of remittance information.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.TypeOfRemittance.Structured">
            <summary>
            Structured remittance information.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.TypeOfRemittance.Unstructured">
            <summary>
            Unstructured remittance information.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding">
            <summary>
            Defines the encoding types for Girocode payloads.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.UTF_8">
            <summary>
            UTF-8 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_1">
            <summary>
            ISO-8859-1 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_2">
            <summary>
            ISO-8859-2 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_4">
            <summary>
            ISO-8859-4 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_5">
            <summary>
            ISO-8859-5 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_7">
            <summary>
            ISO-8859-7 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_10">
            <summary>
            ISO-8859-10 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_15">
            <summary>
            ISO-8859-15 encoding.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Girocode.GirocodeException">
            <summary>
            Represents errors that occur during Girocode generation.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Girocode.GirocodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Girocode.GirocodeException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Girocode.GirocodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Girocode.GirocodeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Girocode.GirocodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Girocode.GirocodeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.LitecoinAddress">
            <summary>
            Generates a payload for Litecoin payment addresses.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.LitecoinAddress.#ctor(System.String,System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.LitecoinAddress"/> class.
            Generates a Litecoin payment payload. QR Codes with this payload can open a payment app.
            </summary>
            <param name="address">The Litecoin address of the payment receiver.</param>
            <param name="amount">The amount of Litecoin to transfer.</param>
            <param name="label">A reference label.</param>
            <param name="message">A reference text or message.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Mail">
            <summary>
            Generates an email payload that can be used to create a QR code for sending an email.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Mail.#ctor(System.String,System.String,System.String,QRCoder.PayloadGenerator.Mail.MailEncoding)">
            <summary>
            Creates an email payload with subject and message/text.
            </summary>
            <param name="mailReceiver">Receiver's email address.</param>
            <param name="subject">Subject line of the email.</param>
            <param name="message">Message content of the email.</param>
            <param name="encoding">Payload encoding type. Choose dependent on your QR Code scanner app.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Mail.ToString">
            <summary>
            Returns the email payload as a string.
            </summary>
            <returns>The email payload as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Mail.MailEncoding">
            <summary>
            Defines the encoding types for the email payload.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Mail.MailEncoding.MAILTO">
            <summary>
            Uses the "mailto:" URI scheme.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Mail.MailEncoding.MATMSG">
            <summary>
            Uses the "MATMSG:" format.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.Mail.MailEncoding.SMTP">
            <summary>
            Uses the "SMTP:" format.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.MMS">
            <summary>
            Generates a MMS (Multimedia Messaging Service) payload for QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MMS.#ctor(System.String,QRCoder.PayloadGenerator.MMS.MMSEncoding)">
            <summary>
            Creates a MMS payload without text.
            </summary>
            <param name="number">Receiver phone number.</param>
            <param name="encoding">Encoding type.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MMS.#ctor(System.String,System.String,QRCoder.PayloadGenerator.MMS.MMSEncoding)">
            <summary>
            Creates a MMS payload with text (subject).
            </summary>
            <param name="number">Receiver phone number.</param>
            <param name="subject">Text of the MMS.</param>
            <param name="encoding">Encoding type.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MMS.ToString">
            <summary>
            Returns the MMS payload as a string.
            </summary>
            <returns>The MMS payload as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.MMS.MMSEncoding">
            <summary>
            Defines the encoding types for the MMS payload.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.MMS.MMSEncoding.MMS">
            <summary>
            Uses the "mms:" URI scheme.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.MMS.MMSEncoding.MMSTO">
            <summary>
            Uses the "mmsto:" URI scheme.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.MoneroTransaction">
            <summary>
            Generates a Monero transaction payload for QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MoneroTransaction.#ctor(System.String,System.Nullable{System.Single},System.String,System.String,System.String)">
            <summary>
            Creates a Monero transaction payload.
            </summary>
            <param name="address">Receiver's Monero address.</param>
            <param name="txAmount">Amount to transfer.</param>
            <param name="txPaymentId">Payment ID.</param>
            <param name="recipientName">Recipient's name.</param>
            <param name="txDescription">Reference text / payment description.</param>
            <exception cref="T:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException">Thrown when the address is null or empty, or when the txAmount is less than or equal to 0.</exception>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MoneroTransaction.ToString">
            <summary>
            Returns the Monero transaction payload as a URI string.
            </summary>
            <returns>The Monero transaction payload as a URI string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException">
            <summary>
            Exception class for Monero transaction errors.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.MoneroTransaction.MoneroTransactionException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.OneTimePassword">
            <summary>
            Generates a payload for One Time Password (OTP) used in applications like Google Authenticator.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Type">
            <summary>
            The type of OTP (TOTP or HOTP).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Secret">
            <summary>
            The secret key used for OTP generation.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.AuthAlgorithm">
            <summary>
            The hashing algorithm used for OTP (SHA1, SHA256, SHA512).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Algorithm">
            <summary>
            Obsolete. Use <see cref="P:QRCoder.PayloadGenerator.OneTimePassword.AuthAlgorithm"/> instead.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Issuer">
            <summary>
            The issuer of the OTP (usually the service or company name).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Label">
            <summary>
            The label for the OTP (usually the user's email or username).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Digits">
            <summary>
            The number of digits in the OTP (default is 6).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Counter">
            <summary>
            The counter value for HOTP (only used if Type is HOTP).
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.OneTimePassword.Period">
            <summary>
            The period in seconds for TOTP (default is 30).
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthType">
            <summary>
            Enum for OTP types.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthType.TOTP">
            <summary>
            Time-based One-Time Password (TOTP)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthType.HOTP">
            <summary>
            HMAC-based One-Time Password (HOTP)
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm">
            <summary>
            Enum for hashing algorithms used in OTP.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm.SHA1">
            <summary>
            SHA-1 hashing algorithm
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm.SHA256">
            <summary>
            SHA-256 hashing algorithm
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm.SHA512">
            <summary>
            SHA-512 hashing algorithm
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm">
            <summary>
            Obsolete. Use <see cref="T:QRCoder.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm"/> instead.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm.SHA1">
            <summary>
            SHA-1 hashing algorithm (Obsolete)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm.SHA256">
            <summary>
            SHA-256 hashing algorithm (Obsolete)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm.SHA512">
            <summary>
            SHA-512 hashing algorithm (Obsolete)
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.OneTimePassword.ToString">
            <summary>
            Returns the OTP payload as a string.
            </summary>
            <returns>The OTP payload as a string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.OneTimePassword.HMACToString">
            <summary>
            Returns the HOTP payload as a string.
            </summary>
            <returns>The HOTP payload as a string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.OneTimePassword.TimeToString">
            <summary>
            Returns the TOTP payload as a string.
            </summary>
            <returns>The TOTP payload as a string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.OneTimePassword.ProcessCommonFields(System.Text.StringBuilder)">
            <summary>
            Processes the common fields for both TOTP and HOTP.
            </summary>
            <param name="sb">StringBuilder to append the common fields.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Payload">
            <summary>
            Represents the base class for all QR code payloads.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.Payload.Version">
            <summary>
            Gets the version of the QR code payload.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.Payload.EccLevel">
            <summary>
            Gets the error correction level of the QR code payload.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.Payload.EciMode">
            <summary>
            Gets the ECI mode of the QR code payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Payload.ToString">
            <summary>
            Returns a string representation of the QR code payload.
            </summary>
            <returns>A string representation of the QR code payload.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.PhoneNumber">
            <summary>
            Generates a phone call payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.PhoneNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.PhoneNumber"/> class.
            </summary>
            <param name="number">Phone number of the receiver.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.PhoneNumber.ToString">
            <summary>
            Returns the phone call payload as a string.
            </summary>
            <returns>The phone call payload as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.RussiaPaymentOrder">
            <summary>
            Generates a payload for a Russian payment order.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.#ctor(System.String,System.String,System.String,System.String,System.String,QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields,QRCoder.PayloadGenerator.RussiaPaymentOrder.CharacterSets)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.RussiaPaymentOrder"/> class.
            </summary>
            <param name="name">Name of the payee (Наименование получателя платежа)</param>
            <param name="personalAcc">Beneficiary account number (Номер счета получателя платежа)</param>
            <param name="bankName">Name of the beneficiary's bank (Наименование банка получателя платежа)</param>
            <param name="BIC">BIC (БИК)</param>
            <param name="correspAcc">Box number / account payee's bank (Номер кор./сч. банка получателя платежа)</param>
            <param name="optionalFields">An (optional) object of additional fields</param>
            <param name="characterSet">Type of encoding (default UTF-8)</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.ToString">
            <summary>
            Returns the payload as a string.
            </summary>
            <remarks>⚠ Attention: If CharacterSets was set to windows-1251 or koi8-r you should use ToBytes() instead of ToString() and pass the bytes to CreateQrCode()!</remarks>
            <returns>The payload as a string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.ToBytes">
            <summary>
            Returns the payload as a byte array.
            </summary>
            <remarks>Should be used if CharacterSets equals windows-1251 or koi8-r.</remarks>
            <returns>The payload as a byte array.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.DetermineSeparator">
            <summary>
            Determines a valid separator
            </summary>
            <returns></returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.GetOptionalFieldsAsList">
            <summary>
            Takes all optional fields that are not null and returns their string represantion
            </summary>
            <returns>A List of strings</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.GetMandatoryFieldsAsList">
            <summary>
            Takes all mandatory fields that are not null and returns their string represantion
            </summary>
            <returns>A List of strings</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.ValidateInput(System.String,System.String,System.String,System.String)">
            <summary>
            Validates a string against a given Regex pattern. Returns input if it matches the Regex expression (=valid) or throws Exception in case there's a mismatch
            </summary>
            <param name="input">String to be validated</param>
            <param name="fieldname">Name/descriptor of the string to be validated</param>
            <param name="pattern">A regex pattern to be used for validation</param>
            <param name="errorText">An optional error text. If null, a standard error text is generated</param>
            <returns>Input value (in case it is valid)</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.ValidateInput(System.String,System.String,System.String[],System.String)">
            <summary>
            Validates a string against one or more given Regex patterns. Returns input if it matches all regex expressions (=valid) or throws Exception in case there's a mismatch
            </summary>
            <param name="input">String to be validated</param>
            <param name="fieldname">Name/descriptor of the string to be validated</param>
            <param name="patterns">An array of regex patterns to be used for validation</param>
            <param name="errorText">An optional error text. If null, a standard error text is generated</param>
            <returns>Input value (in case it is valid)</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields">
            <summary>
            Represents optional fields for the RussiaPaymentOrder.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.Sum">
            <summary>
            Payment amount, in kopecks (FTI’s Amount.)
            <para>Сумма платежа, в копейках</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.Purpose">
            <summary>
            Payment name (purpose)
            <para>Наименование платежа (назначение)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PayeeINN">
            <summary>
            Payee's INN (Resident Tax Identification Number; Text, up to 12 characters.)
            <para>ИНН получателя платежа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PayerINN">
            <summary>
            Payer's INN (Resident Tax Identification Number; Text, up to 12 characters.)
            <para>ИНН плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.DrawerStatus">
            <summary>
            Status compiler payment document
            <para>Статус составителя платежного документа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.KPP">
            <summary>
            KPP of the payee (Tax Registration Code; Text, up to 9 characters.)
            <para>КПП получателя платежа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.CBC">
            <summary>
            CBC
            <para>КБК</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.OKTMO">
            <summary>
            All-Russian classifier territories of municipal formations
            <para>Общероссийский классификатор территорий муниципальных образований</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PaytReason">
            <summary>
            Basis of tax payment
            <para>Основание налогового платежа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.TaxPeriod">
            <summary>
            Taxable period
            <para>Налоговый период</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.DocNo">
            <summary>
            Document number
            <para>Номер документа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.DocDate">
            <summary>
            Document date
            <para>Дата документа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.TaxPaytKind">
            <summary>
            Payment type
            <para>Тип платежа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.LastName">
            <summary>
            Payer's surname
            <para>Фамилия плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.FirstName">
            <summary>
            Payer's name
            <para>Имя плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.MiddleName">
            <summary>
            Payer's patronymic
            <para>Отчество плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PayerAddress">
            <summary>
            Payer's address
            <para>Адрес плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PersonalAccount">
            <summary>
            Personal account of a budget recipient
            <para>Лицевой счет бюджетного получателя</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.DocIdx">
            <summary>
            Payment document index
            <para>Индекс платежного документа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PensAcc">
            <summary>
            Personal account number in the personalized accounting system in the Pension Fund of the Russian Federation - SNILS
            <para>№ лицевого счета в системе персонифицированного учета в ПФР - СНИЛС</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.Contract">
            <summary>
            Number of contract
            <para>Номер договора</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PersAcc">
            <summary>
            Personal account number of the payer in the organization (in the accounting system of the PU)
            <para>Номер лицевого счета плательщика в организации (в системе учета ПУ)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.Flat">
            <summary>
            Apartment number
            <para>Номер квартиры</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.Phone">
            <summary>
            Phone number
            <para>Номер телефона</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PayerIdType">
            <summary>
            DUL payer type
            <para>Вид ДУЛ плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PayerIdNum">
            <summary>
            DUL number of the payer
            <para>Номер ДУЛ плательщика</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.ChildFio">
            <summary>
            FULL NAME. child / student
            <para>Ф.И.О. ребенка/учащегося</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.BirthDate">
            <summary>
            Date of birth
            <para>Дата рождения</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PaymTerm">
            <summary>
            Due date / Invoice date
            <para>Срок платежа/дата выставления счета</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.PaymPeriod">
            <summary>
            Payment period
            <para>Период оплаты</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.Category">
            <summary>
            Payment type
            <para>Вид платежа</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.ServiceName">
            <summary>
            Service code / meter name
            <para>Код услуги/название прибора учета</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.CounterId">
            <summary>
            Metering device number
            <para>Номер прибора учета</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.CounterVal">
            <summary>
            Meter reading
            <para>Показание прибора учета</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.QuittId">
            <summary>
            Notification, accrual, account number
            <para>Номер извещения, начисления, счета</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.QuittDate">
            <summary>
            Date of notification / accrual / invoice / resolution (for traffic police)
            <para>Дата извещения/начисления/счета/постановления (для ГИБДД)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.InstNum">
            <summary>
            Institution number (educational, medical)
            <para>Номер учреждения (образовательного, медицинского)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.ClassNum">
            <summary>
            Kindergarten / school class number
            <para>Номер группы детсада/класса школы</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.SpecFio">
            <summary>
            Full name of the teacher, specialist providing the service
            <para>ФИО преподавателя, специалиста, оказывающего услугу</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.AddAmount">
            <summary>
            Insurance / additional service amount / Penalty amount (in kopecks)
            <para>Сумма страховки/дополнительной услуги/Сумма пени (в копейках)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.RuleId">
            <summary>
            Resolution number (for traffic police)
            <para>Номер постановления (для ГИБДД)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.ExecId">
            <summary>
            Enforcement Proceedings Number
            <para>Номер исполнительного производства</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.RegType">
            <summary>
            Type of payment code (for example, for payments to Rosreestr)
            <para>Код вида платежа (например, для платежей в адрес Росреестра)</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.UIN">
            <summary>
            Unique accrual identifier
            <para>Уникальный идентификатор начисления</para>
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.RussiaPaymentOrder.OptionalFields.TechCode">
            <summary>
            The technical code recommended by the service provider. Maybe used by the receiving organization to call the appropriate processing IT system.
            <para>Технический код, рекомендуемый для заполнения поставщиком услуг. Может использоваться принимающей организацией для вызова соответствующей обрабатывающей ИТ-системы.</para>
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode">
            <summary>            
            (List of values of the technical code of the payment)
            <para>Перечень значений технического кода платежа</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Мобильная_связь_стационарный_телефон">
            <summary>
            Mobile and landline telephone services
            <para>Мобильная связь и стационарный телефон</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Коммунальные_услуги_ЖКХAFN">
            <summary>
            Utility services (Housing and Communal Services)
            <para>Коммунальные услуги (ЖКХ)</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.ГИБДД_налоги_пошлины_бюджетные_платежи">
            <summary>
            Traffic police, taxes, duties, and budget payments
            <para>ГИБДД, налоги, пошлины, бюджетные платежи</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Охранные_услуги">
            <summary>
            Security services
            <para>Охранные услуги</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Услуги_оказываемые_УФМС">
            <summary>
            Services provided by the Federal Migration Service
            <para>Услуги, оказываемые УФМС</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.ПФР">
            <summary>
            Pension Fund of the Russian Federation
            <para>Пенсионный фонд России (ПФР)</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Погашение_кредитов">
            <summary>
            Loan repayment
            <para>Погашение кредитов</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Образовательные_учреждения">
            <summary>
            Educational institutions
            <para>Образовательные учреждения</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Интернет_и_ТВ">
            <summary>
            Internet and TV services
            <para>Интернет и телевидение</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Электронные_деньги">
            <summary>
            Electronic money
            <para>Электронные деньги</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Отдых_и_путешествия">
            <summary>
            Recreation and travel
            <para>Отдых и путешествия</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Инвестиции_и_страхование">
            <summary>
            Investments and insurance
            <para>Инвестиции и страхование</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Спорт_и_здоровье">
            <summary>
            Sports and health
            <para>Спорт и здоровье</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Благотворительные_и_общественные_организации">
            <summary>
            Charitable and public organizations
            <para>Благотворительные и общественные организации</para>
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.TechCode.Прочие_услуги">
            <summary>
            Other services
            <para>Прочие услуги</para>
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.RussiaPaymentOrder.CharacterSets">
            <summary>
            Specifies character sets for encoding the RussiaPaymentOrder payload.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.CharacterSets.windows_1251">
            <summary>
            Windows-1251 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.CharacterSets.utf_8">
            <summary>
            UTF-8 encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.RussiaPaymentOrder.CharacterSets.koi8_r">
            <summary>
            KOI8-R encoding.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.RussiaPaymentOrder.RussiaPaymentOrderException">
            <summary>
            Represents errors that occur during the generation of a RussiaPaymentOrder payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.RussiaPaymentOrder.RussiaPaymentOrderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.RussiaPaymentOrder.RussiaPaymentOrderException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ShadowSocksConfig">
            <summary>
            Generates a ShadowSocks proxy config payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.#ctor(System.String,System.Int32,System.String,QRCoder.PayloadGenerator.ShadowSocksConfig.Method,System.String)">
            <summary>
            Generates a ShadowSocks proxy config payload.
            </summary>
            <param name="hostname">Hostname of the ShadowSocks proxy</param>
            <param name="port">Port of the ShadowSocks proxy</param>
            <param name="password">Password of the SS proxy</param>
            <param name="method">Encryption type</param>
            <param name="tag">Optional tag line</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.#ctor(System.String,System.Int32,System.String,QRCoder.PayloadGenerator.ShadowSocksConfig.Method,System.String,System.String,System.String)">
            <summary>
            Generates a ShadowSocks proxy config payload with plugin options.
            </summary>
            <param name="hostname">Hostname of the ShadowSocks proxy</param>
            <param name="port">Port of the ShadowSocks proxy</param>
            <param name="password">Password of the SS proxy</param>
            <param name="method">Encryption type</param>
            <param name="plugin">Plugin name</param>
            <param name="pluginOption">Plugin option</param>
            <param name="tag">Optional tag line</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.#ctor(System.String,System.Int32,System.String,QRCoder.PayloadGenerator.ShadowSocksConfig.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Generates a ShadowSocks proxy config payload with additional parameters.
            </summary>
            <param name="hostname">Hostname of the ShadowSocks proxy</param>
            <param name="port">Port of the ShadowSocks proxy</param>
            <param name="password">Password of the SS proxy</param>
            <param name="method">Encryption type</param>
            <param name="parameters">Additional parameters</param>
            <param name="tag">Optional tag line</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.ToString">
            <summary>
            Converts the ShadowSocks config payload to a string.
            </summary>
            <returns>A string representation of the ShadowSocks config payload.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ShadowSocksConfig.Method">
            <summary>
            Specifies the encryption methods used by ShadowSocks.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Chacha20IetfPoly1305">
            <summary>
            ChaCha20-IETF with Poly1305 AEAD encryption method
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes128Gcm">
            <summary>
            AES-128 Galois/Counter Mode (GCM) encryption method
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes192Gcm">
            <summary>
            AES-192 Galois/Counter Mode (GCM) encryption method
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Gcm">
            <summary>
            AES-256 Galois/Counter Mode (GCM) encryption method
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.XChacha20IetfPoly1305">
            <summary>
            Extended ChaCha20-IETF with Poly1305 AEAD encryption method (non-standard)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes128Cfb">
            <summary>
            AES-128 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes192Cfb">
            <summary>
            AES-192 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cfb">
            <summary>
            AES-256 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes128Ctr">
            <summary>
            AES-128 Counter (CTR) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes192Ctr">
            <summary>
            AES-192 Counter (CTR) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Ctr">
            <summary>
            AES-256 Counter (CTR) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Camellia128Cfb">
            <summary>
            Camellia-128 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Camellia192Cfb">
            <summary>
            Camellia-192 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Camellia256Cfb">
            <summary>
            Camellia-256 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Chacha20Ietf">
            <summary>
            ChaCha20-IETF stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cb">
            <summary>
            Alias for AES-256 Cipher Feedback (CFB) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes128Ofb">
            <summary>
            AES-128 Output Feedback (OFB) stream cipher (non-standard)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes192Ofb">
            <summary>
            AES-192 Output Feedback (OFB) stream cipher (non-standard)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Ofb">
            <summary>
            AES-256 Output Feedback (OFB) stream cipher (non-standard)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes128Cfb1">
            <summary>
            AES-128 Cipher Feedback 1-bit (CFB1) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes192Cfb1">
            <summary>
            AES-192 Cipher Feedback 1-bit (CFB1) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cfb1">
            <summary>
            AES-256 Cipher Feedback 1-bit (CFB1) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes128Cfb8">
            <summary>
            AES-128 Cipher Feedback 8-bit (CFB8) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes192Cfb8">
            <summary>
            AES-192 Cipher Feedback 8-bit (CFB8) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cfb8">
            <summary>
            AES-256 Cipher Feedback 8-bit (CFB8) stream cipher
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Chacha20">
            <summary>
            ChaCha20 stream cipher (deprecated)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.BfCfb">
            <summary>
            Blowfish Cipher Feedback (CFB) stream cipher (deprecated)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Rc4Md5">
            <summary>
            RC4-MD5 stream cipher (deprecated)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Salsa20">
            <summary>
            Salsa20 stream cipher (deprecated)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.DesCfb">
            <summary>
            DES Cipher Feedback (CFB) stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.IdeaCfb">
            <summary>
            IDEA Cipher Feedback (CFB) stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Rc2Cfb">
            <summary>
            RC2 Cipher Feedback (CFB) stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Cast5Cfb">
            <summary>
            CAST5 Cipher Feedback (CFB) stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Salsa20Ctr">
            <summary>
            Salsa20 Counter (CTR) stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Rc4">
            <summary>
            RC4 stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.SeedCfb">
            <summary>
            SEED Cipher Feedback (CFB) stream cipher (not standard, not in active use)
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.ShadowSocksConfig.Method.Table">
            <summary>
            Table-based encryption method (not standard, not in active use)
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException">
            <summary>
            Represents errors that occur during the generation of a ShadowSocksConfig payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SkypeCall">
            <summary>
            Generates a Skype call payload
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SkypeCall.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SkypeCall"/> class.
            </summary>
            <param name="skypeUsername">Skype username which will be called</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SkypeCall.ToString">
            <summary>
            Converts the Skype call payload to a string.
            </summary>
            <returns>A string representation of the Skype call payload.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SlovenianUpnQr">
            <summary>
            Generates a Slovenian UPN QR payment payload.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SlovenianUpnQr.Version">
            <summary>
            Gets the version of the QR code, which is 15 for Slovenian UPN QR.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SlovenianUpnQr.EccLevel">
            <summary>
            Gets the error correction level of the QR code, which is M for Slovenian UPN QR.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SlovenianUpnQr.EciMode">
            <summary>
            Gets the ECI mode of the QR code, which is Iso8859_2 for Slovenian UPN QR.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SlovenianUpnQr.LimitLength(System.String,System.Int32)">
            <summary>
            Limits the length of a string to a specified maximum length.
            </summary>
            <param name="value">The string to limit.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <returns>The limited string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SlovenianUpnQr.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SlovenianUpnQr"/> class.
            </summary>
            <param name="payerName">The name of the payer.</param>
            <param name="payerAddress">The address of the payer.</param>
            <param name="payerPlace">The place of the payer.</param>
            <param name="recipientName">The name of the recipient.</param>
            <param name="recipientAddress">The address of the recipient.</param>
            <param name="recipientPlace">The place of the recipient.</param>
            <param name="recipientIban">The IBAN of the recipient.</param>
            <param name="description">The description of the payment.</param>
            <param name="amount">The amount of the payment.</param>
            <param name="recipientSiModel">The SI model of the recipient.</param>
            <param name="recipientSiReference">The SI reference of the recipient.</param>
            <param name="code">The code of the payment.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SlovenianUpnQr.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SlovenianUpnQr"/> class with a deadline.
            </summary>
            <param name="payerName">The name of the payer.</param>
            <param name="payerAddress">The address of the payer.</param>
            <param name="payerPlace">The place of the payer.</param>
            <param name="recipientName">The name of the recipient.</param>
            <param name="recipientAddress">The address of the recipient.</param>
            <param name="recipientPlace">The place of the recipient.</param>
            <param name="recipientIban">The IBAN of the recipient.</param>
            <param name="description">The description of the payment.</param>
            <param name="amount">The amount of the payment.</param>
            <param name="deadline">The deadline for the payment.</param>
            <param name="recipientSiModel">The SI model of the recipient.</param>
            <param name="recipientSiReference">The SI reference of the recipient.</param>
            <param name="code">The code of the payment.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SlovenianUpnQr.FormatAmount(System.Double)">
            <summary>
            Formats the amount as a string with leading zeros.
            </summary>
            <param name="amount">The amount to format.</param>
            <returns>The formatted amount string.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SlovenianUpnQr.CalculateChecksum">
            <summary>
            Calculates the checksum of the payment data.
            </summary>
            <returns>The checksum of the payment data.</returns>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SlovenianUpnQr.ToString">
            <summary>
            Returns the Slovenian UPN QR payment data as a string.
            </summary>
            <returns>The Slovenian UPN QR payment data as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SMS">
            <summary>
            Generates an SMS payload.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SMS.#ctor(System.String,QRCoder.PayloadGenerator.SMS.SMSEncoding)">
            <summary>
            Creates an SMS payload without text.
            </summary>
            <param name="number">Receiver phone number.</param>
            <param name="encoding">Encoding type.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SMS.#ctor(System.String,System.String,QRCoder.PayloadGenerator.SMS.SMSEncoding)">
            <summary>
            Creates an SMS payload with text (subject).
            </summary>
            <param name="number">Receiver phone number.</param>
            <param name="subject">Text of the SMS.</param>
            <param name="encoding">Encoding type.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SMS.ToString">
            <summary>
            Returns the SMS payload as a string.
            </summary>
            <returns>The SMS payload as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SMS.SMSEncoding">
            <summary>
            Specifies the encoding type for the SMS payload.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SMS.SMSEncoding.SMS">
            <summary>
            Standard SMS encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SMS.SMSEncoding.SMSTO">
            <summary>
            SMSTO encoding.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SMS.SMSEncoding.SMS_iOS">
            <summary>
            SMS encoding for iOS.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode">
            <summary>
            Generates the payload for a SwissQrCode.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.EccLevel">
            <inheritdoc/>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.EciMode">
            <inheritdoc/>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.#ctor(QRCoder.PayloadGenerator.SwissQrCode.Iban,QRCoder.PayloadGenerator.SwissQrCode.Currency,QRCoder.PayloadGenerator.SwissQrCode.Contact,QRCoder.PayloadGenerator.SwissQrCode.Reference,QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation,QRCoder.PayloadGenerator.SwissQrCode.Contact,System.Nullable{System.Decimal},System.Nullable{System.DateTime},QRCoder.PayloadGenerator.SwissQrCode.Contact,System.String,System.String)">
            <summary>
            Generates the payload for a SwissQrCode v2.0. (Don't forget to use ECC-Level=M, EncodingMode=UTF-8 and to set the Swiss flag icon to the final QR code.)
            </summary>
            <param name="iban">IBAN object</param>
            <param name="currency">Currency (either EUR or CHF)</param>
            <param name="creditor">Creditor (payee) information</param>
            <param name="reference">Reference information</param>
            <param name="additionalInformation">Additional information for the QR code</param>
            <param name="debitor">Debitor (payer) information</param>
            <param name="amount">Amount</param>
            <param name="requestedDateOfPayment">Requested date of debitor's payment</param>
            <param name="ultimateCreditor">Ultimate creditor information (use only in consultation with your bank - for future use only!)</param>
            <param name="alternativeProcedure1">Optional command for alternative processing mode - line 1</param>
            <param name="alternativeProcedure2">Optional command for alternative processing mode - line 2</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation">
            <summary>
            Represents additional information for the SwissQrCode.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.#ctor(System.String,System.String)">
            <summary>
            Creates an additional information object. Both parameters are optional and must be shorter than 141 chars in combination.
            </summary>
            <param name="unstructuredMessage">Unstructured text message</param>
            <param name="billInformation">Bill information</param>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.UnstructureMessage">
            <summary>
            Gets the unstructured message.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.BillInformation">
            <summary>
            Gets the bill information.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.Trailer">
            <summary>
            Gets the trailer.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException">
            <summary>
            Represents exceptions specific to SwissQrCode additional information.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Reference">
            <summary>
            Represents reference information for the SwissQrCode.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Reference.#ctor(QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceType,System.String,System.Nullable{QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType})">
            <summary>
            Creates a reference object which must be passed to the SwissQrCode instance
            </summary>
            <param name="referenceType">Type of the reference (QRR, SCOR or NON)</param>
            <param name="reference">Reference text</param>
            <param name="referenceTextType">Type of the reference text (QR-reference or Creditor Reference)</param>                
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.Reference.RefType">
            <summary>
            Gets the reference type.
            </summary>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceText">
            <summary>
            Gets the reference text.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceType">
            <summary>
            Reference type. When using a QR-IBAN you have to use either "QRR" or "SCOR".
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceType.QRR">
            <summary>
            QR Reference
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceType.SCOR">
            <summary>
            Creditor Reference
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceType.NON">
            <summary>
            No Reference
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType">
            <summary>
            Represents the text type for the reference.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType.QrReference">
            <summary>
            QR Reference Text
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType.CreditorReferenceIso11649">
            <summary>
            Creditor Reference ISO 11649
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException">
            <summary>
            Represents exceptions specific to SwissQrCode references.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Iban">
            <summary>
            Represents an IBAN with type information.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Iban.#ctor(System.String,QRCoder.PayloadGenerator.SwissQrCode.Iban.IbanType)">
            <summary>
            IBAN object with type information
            </summary>
            <param name="iban">IBAN</param>
            <param name="ibanType">Type of IBAN (normal or QR-IBAN)</param>
        </member>
        <member name="P:QRCoder.PayloadGenerator.SwissQrCode.Iban.IsQrIban">
            <summary>
            Gets a value indicating whether this is a QR-IBAN.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Iban.ToString">
            <summary>
            Converts the IBAN object to its string representation.
            </summary>
            <returns>A string representation of the IBAN.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Iban.IbanType">
            <summary>
            Represents the type of IBAN.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Iban.IbanType.Iban">
            <summary>
            Regular IBAN
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Iban.IbanType.QrIban">
            <summary>
            QR-IBAN
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException">
            <summary>
            Represents exceptions specific to SwissQrCode IBANs.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Contact">
            <summary>
            Represents contact information.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Contact type. Can be used for payee, ultimate payee, etc. with address in structured mode (S).
            </summary>
            <param name="name">Last name or company (optional first name)</param>
            <param name="zipCode">Zip-/Postcode</param>
            <param name="city">City name</param>
            <param name="country">Two-letter country code as defined in ISO 3166-1</param>
            <param name="street">Streetname without house number</param>
            <param name="houseNumber">House number</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Contact type. Can be used for payee, ultimate payee, etc. with address in combined mode (K).
            </summary>
            <param name="name">Last name or company (optional first name)</param>
            <param name="country">Two-letter country code as defined in ISO 3166-1</param>
            <param name="addressLine1">Adress line 1</param>
            <param name="addressLine2">Adress line 2</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.WithStructuredAddress(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a contact with structured address.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.WithCombinedAddress(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a contact with combined address.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.ToString">
            <summary>
            Returns a string that represents the contact information in the format required for Swiss QR codes.
            </summary>
            <returns>A string representing the contact information.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Contact.AddressType">
            <summary>
            Defines the type of address.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Contact.AddressType.StructuredAddress">
            <summary>
            Structured Address
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Contact.AddressType.CombinedAddress">
            <summary>
            Combined Address
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException">
            <summary>
            Represents errors that occur during the creation of a Swiss QR code contact.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.ToString">
            <summary>
            Returns a string that represents the entire Swiss QR code payload.
            </summary>
            <returns>A string representing the Swiss QR code payload.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.Currency">
            <summary>
            ISO 4217 currency codes.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Currency.CHF">
            <summary>
            Swiss Franc
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.SwissQrCode.Currency.EUR">
            <summary>
            Euro
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException">
            <summary>
            Represents errors that occur during Swiss QR Code generation.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException"/> class.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.SwissQrCode.SwissQrCodeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:QRCoder.PayloadGenerator.Url">
            <summary>
            Generates a URL payload for QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Url.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.Url"/> class.
            </summary>
            <param name="url">The target URL. If the protocol is not specified, the http protocol will be added.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.Url.ToString">
            <summary>
            Returns the URL payload as a string.
            </summary>
            <returns>The URL payload as a string, ensuring it starts with "http://" if no protocol is specified.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.WhatsAppMessage">
            <summary>
            Generates a WhatsApp message payload for QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.WhatsAppMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.WhatsAppMessage"/> class with a receiver number and message.
            </summary>
            <param name="number">
            Receiver phone number in full international format. 
            Omit any zeroes, brackets, or dashes. Use format: 1XXXXXXXXXX. Don't use: +001-(XXX)XXXXXXX.
            </param>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.WhatsAppMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.WhatsAppMessage"/> class with a message only.
            When scanned, the user is asked to choose a contact to receive the message.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.WhatsAppMessage.ToString">
            <summary>
            Returns the WhatsApp message payload as a string.
            </summary>
            <returns>The WhatsApp message URL as a string.</returns>
        </member>
        <member name="T:QRCoder.PayloadGenerator.WiFi">
            <summary>
            Generates a WiFi payload. Scanned by a QR Code scanner app, the device will connect to the WiFi.
            </summary>
        </member>
        <member name="M:QRCoder.PayloadGenerator.WiFi.#ctor(System.String,System.String,QRCoder.PayloadGenerator.WiFi.Authentication,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PayloadGenerator.WiFi"/> class.
            </summary>
            <param name="ssid">SSID of the WiFi network</param>
            <param name="password">Password of the WiFi network</param>
            <param name="authenticationMode">Authentication mode (WEP, WPA, WPA2)</param>
            <param name="isHiddenSSID">Set flag if the WiFi network hides its SSID</param>
            <param name="escapeHexStrings">Set flag if ssid/password is delivered as HEX string. Note: May not be supported on iOS devices.</param>
        </member>
        <member name="M:QRCoder.PayloadGenerator.WiFi.ToString">
            <summary>
            Returns the WiFi payload as a string.
            </summary>
        </member>
        <member name="T:QRCoder.PayloadGenerator.WiFi.Authentication">
            <summary>
            Specifies the authentication mode for the WiFi network.
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.WiFi.Authentication.WEP">
            <summary>
            WEP authentication mode
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.WiFi.Authentication.WPA">
            <summary>
            WPA authentication mode
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.WiFi.Authentication.nopass">
            <summary>
            No password authentication mode
            </summary>
        </member>
        <member name="F:QRCoder.PayloadGenerator.WiFi.Authentication.WPA2">
            <summary>
            WPA2 authentication mode
            </summary>
        </member>
        <member name="T:QRCoder.PdfByteQRCode">
            <summary>
            Represents a QR code generator that outputs QR codes as PDF byte arrays.
            </summary>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PdfByteQRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PdfByteQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.GetGraphic(System.Int32)">
            <summary>
            Creates a PDF document with a black and white QR code.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <returns>Returns the QR code graphic as a PDF byte array.</returns>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.GetGraphic(System.Int32,System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Creates a PDF document with specified colors and DPI.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <param name="dpi">The DPI (dots per inch) of the PDF document.</param>
            <param name="jpgQuality">The JPEG quality parameter (obsolete, no longer used).</param>
            <returns>Returns the QR code graphic as a PDF byte array.</returns>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.CreatePathFromModules">
            <summary>
            Creates a PDF path with rectangles for all dark modules in the QR code.
            Uses Run-Length Encoding (RLE) to combine adjoining dark modules in each row into single rectangles.
            </summary>
            <returns>PDF path commands as a string.</returns>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.ColorToPdfRgb(System.Byte[])">
            <summary>
            Converts RGB byte array to PDF color space values (0.0 to 1.0).
            </summary>
            <param name="color">RGB color as byte array.</param>
            <returns>PDF color string (three decimal values).</returns>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.ToStr(System.Int32)">
            <summary>
            Converts an integer to a string using invariant culture for consistent PDF formatting.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>String representation of the integer.</returns>
        </member>
        <member name="M:QRCoder.PdfByteQRCode.ToStr(System.Single)">
            <summary>
            Converts a float to a string using invariant culture for consistent PDF formatting.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>String representation of the float.</returns>
        </member>
        <member name="T:QRCoder.PdfByteQRCodeHelper">
            <summary>
            Provides static methods for creating PDF byte array QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PdfByteQRCodeHelper.GetQRCode(System.String,System.Int32,System.String,System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Creates a PDF byte array QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <returns>Returns the QR code graphic as a PDF byte array.</returns>
        </member>
        <member name="M:QRCoder.PdfByteQRCodeHelper.GetQRCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            Creates a PDF byte array QR code with a single function call.
            </summary>
            <param name="txt">The text or payload to be encoded inside the QR code.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="size">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <returns>Returns the QR code graphic as a PDF byte array.</returns>
        </member>
        <member name="T:QRCoder.PngByteQRCode">
            <summary>
            Represents a QR code generator that outputs QR codes as PNG byte arrays.
            </summary>
        </member>
        <member name="M:QRCoder.PngByteQRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PngByteQRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.PngByteQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PngByteQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.PngByteQRCode.GetGraphic(System.Int32,System.Boolean)">
            <summary>
            Creates a black and white PNG of the QR code, using 1-bit grayscale.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a PNG byte array.</returns>
        </member>
        <member name="M:QRCoder.PngByteQRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a 2-color PNG of the QR code, using 1-bit indexed color. Colors may contain transparency.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a PNG byte array.</returns>
        </member>
        <member name="M:QRCoder.PngByteQRCode.GetGraphic(System.Int32,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Creates a 2-color PNG of the QR code, using 1-bit indexed color. Accepts 3-byte RGB colors for normal images and 4-byte RGBA-colors for transparent images.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorRgba">The color of the dark modules as an RGBA byte array.</param>
            <param name="lightColorRgba">The color of the light modules as an RGBA byte array.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a PNG byte array.</returns>
        </member>
        <member name="M:QRCoder.PngByteQRCode.DrawScanlines(System.Int32,System.Boolean)">
            <summary>
            Creates a bitmap where each pixel is represented by a single bit, dark = 0 and light = 1.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the bitmap as a byte array.</returns>
        </member>
        <member name="T:QRCoder.PngByteQRCode.PngBuilder">
            <summary>
            Writes the chunks that make up a PNG file.
            </summary>
            <remarks>
            See https://www.w3.org/TR/2003/REC-PNG-20031110 and https://www.ietf.org/rfc/rfc1950.txt.
            </remarks>
        </member>
        <member name="M:QRCoder.PngByteQRCode.PngBuilder.WriteHeader(System.Int32,System.Int32,System.Byte,QRCoder.PngByteQRCode.PngBuilder.ColorType)">
            <summary>
            Writes the IHDR chunk. This must be the first chunk in the file.
            </summary>
        </member>
        <member name="M:QRCoder.PngByteQRCode.PngBuilder.WritePalette(System.Byte[][])">
            <summary>
            Writes the PLTE chunk, and also the tRNS chunk if necessary. Must come before the IDAT chunk.
            </summary>
        </member>
        <member name="M:QRCoder.PngByteQRCode.PngBuilder.WriteScanlines(System.ArraySegment{System.Byte})">
            <summary>
            Writes the IDAT chunk with the actual picture.
            </summary>
        </member>
        <member name="M:QRCoder.PngByteQRCode.PngBuilder.WriteEnd">
            <summary>
            Writes the IEND chunk. This must be the last chunk in the file.
            </summary>
        </member>
        <member name="T:QRCoder.PngByteQRCodeHelper">
            <summary>
            Provides static methods for creating PNG byte array QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PngByteQRCodeHelper.GetQRCode(System.String,System.Int32,System.Byte[],System.Byte[],QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.Boolean)">
            <summary>
            Creates a PNG byte array QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorRgba">The color of the dark modules as an RGBA byte array.</param>
            <param name="lightColorRgba">The color of the light modules as an RGBA byte array.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a PNG byte array.</returns>
        </member>
        <member name="M:QRCoder.PngByteQRCodeHelper.GetQRCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Int32,System.Boolean)">
            <summary>
            Creates a PNG byte array QR code with a single function call.
            </summary>
            <param name="txt">The text or payload to be encoded inside the QR code.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="size">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a PNG byte array.</returns>
        </member>
        <member name="T:QRCoder.PostscriptQRCode">
            <summary>
            Represents a QR code generator that outputs QR codes as PostScript code.
            </summary>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PostscriptQRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.PostscriptQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.GetGraphic(System.Int32,System.Boolean)">
            <summary>
            Creates a black and white PostScript code representation of the QR code.
            </summary>
            <param name="pointsPerModule">The number of points each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a colored PostScript code representation of the QR code.
            </summary>
            <param name="pointsPerModule">The number of points each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a colored PostScript code representation of the QR code.
            </summary>
            <param name="pointsPerModule">The number of points each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHex">The color of the light modules in HTML hex format.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.GetGraphic(System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Creates a black and white PostScript code representation of the QR code.
            </summary>
            <param name="viewBox">The dimensions of the viewbox for the QR code.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.GetGraphic(System.Drawing.Size,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a colored PostScript code representation of the QR code.
            </summary>
            <param name="viewBox">The dimensions of the viewbox for the QR code.</param>
            <param name="darkColorHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHex">The color of the light modules in HTML hex format.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.GetGraphic(System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a colored PostScript code representation of the QR code.
            </summary>
            <param name="viewBox">The dimensions of the viewbox for the QR code.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="M:QRCoder.PostscriptQRCode.CleanSvgVal(System.Double)">
            <summary>
            Cleans double values for international use/formats.
            </summary>
            <param name="input">The input double value.</param>
            <returns>Returns the cleaned string representation of the double value, with a maximum of 7 significant digits.</returns>
        </member>
        <member name="T:QRCoder.PostscriptQRCodeHelper">
            <summary>
            Provides static methods for creating PostScript QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.PostscriptQRCodeHelper.GetQRCode(System.String,System.Int32,System.String,System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a PostScript QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pointsPerModule">The number of points each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHex">The color of the light modules in HTML hex format.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="epsFormat">Indicates if the output should be in EPS format.</param>
            <returns>Returns the QR code graphic as a PostScript string.</returns>
        </member>
        <member name="T:QRCoder.QRCode">
            <summary>
            Represents a QR code generator that outputs QR codes as bitmap images.
            </summary>
        </member>
        <member name="M:QRCoder.QRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.QRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.QRCode.GetGraphic(System.Int32)">
            <summary>
            Creates a black and white bitmap image of the QR code.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <returns>Returns the QR code graphic as a bitmap.</returns>
        </member>
        <member name="M:QRCoder.QRCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates a colored bitmap image of the QR code.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
            <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a bitmap.</returns>
        </member>
        <member name="M:QRCoder.QRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a colored bitmap image of the QR code.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a bitmap.</returns>
        </member>
        <member name="M:QRCoder.QRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
            <summary>
            Creates a colored bitmap image of the QR code with an optional icon in the center.
            </summary>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="icon">An optional icon to be placed in the center of the QR code.</param>
            <param name="iconSizePercent">The size of the icon as a percentage of the QR code size.</param>
            <param name="iconBorderWidth">The width of the border around the icon.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="iconBackgroundColor">The background color of the icon.</param>
            <returns>Returns the QR code graphic as a bitmap.</returns>
        </member>
        <member name="M:QRCoder.QRCode.CreatePathFromModules(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a GraphicsPath containing rectangles for all dark modules in the QR code.
            Uses Run-Length Encoding (RLE) to combine adjoining dark modules in each row into single rectangles.
            </summary>
            <param name="pixelsPerModule">The number of pixels per module.</param>
            <param name="offset">The offset to apply for quiet zones.</param>
            <param name="drawQuietZones">Whether quiet zones are being drawn.</param>
            <returns>A GraphicsPath containing all dark module rectangles.</returns>
        </member>
        <member name="M:QRCoder.QRCode.CreateRoundedRectanglePath(System.Drawing.RectangleF,System.Int32)">
            <summary>
            Creates a rounded rectangle path for drawing.
            </summary>
            <param name="rect">The rectangle for which to create the rounded path.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <returns>Returns the rounded rectangle path.</returns>
        </member>
        <member name="T:QRCoder.QRCodeHelper">
            <summary>
            Provides static methods for creating bitmap QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeHelper.GetQRCode(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a bitmap QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <param name="icon">An optional icon to be placed in the center of the QR code.</param>
            <param name="iconSizePercent">The size of the icon as a percentage of the QR code size.</param>
            <param name="iconBorderWidth">The width of the border around the icon.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <returns>Returns the QR code graphic as a bitmap.</returns>
        </member>
        <member name="T:QRCoder.QRCodeData">
            <summary>
            Represents the data structure of a QR code.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeData.ModuleMatrix">
            <summary>
            Gets or sets the module matrix of the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeData"/> class with the specified version.
            </summary>
            <param name="version">The version of the QR code.</param>
        </member>
        <member name="M:QRCoder.QRCodeData.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeData"/> class with the specified version and padding option.
            </summary>
            <param name="version">The version of the QR code.</param>
            <param name="addPadding">Indicates whether padding should be added to the QR code.</param>
        </member>
        <member name="M:QRCoder.QRCodeData.#ctor(System.String,QRCoder.QRCodeData.Compression)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeData"/> class with raw data from a specified path and compression mode.
            </summary>
            <param name="pathToRawData">The path to the raw data file.</param>
            <param name="compressMode">The compression mode used for the raw data.</param>
        </member>
        <member name="M:QRCoder.QRCodeData.#ctor(System.Byte[],QRCoder.QRCodeData.Compression)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeData"/> class with raw data and compression mode.
            </summary>
            <param name="rawData">The raw data of the QR code.</param>
            <param name="compressMode">The compression mode used for the raw data.</param>
        </member>
        <member name="M:QRCoder.QRCodeData.GetRawData(QRCoder.QRCodeData.Compression)">
            <summary>
            Gets the raw data of the QR code with the specified compression mode.
            </summary>
            <param name="compressMode">The compression mode used for the raw data.</param>
            <returns>Returns the raw data of the QR code as a byte array.</returns>
        </member>
        <member name="M:QRCoder.QRCodeData.SaveRawData(System.String,QRCoder.QRCodeData.Compression)">
            <summary>
            Saves the raw data of the QR code to a specified file with the specified compression mode.
            </summary>
            <param name="filePath">The path to the file where the raw data will be saved.</param>
            <param name="compressMode">The compression mode used for the raw data.</param>
        </member>
        <member name="P:QRCoder.QRCodeData.Version">
            <summary>
            Gets the version of the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeData.ModulesPerSideFromVersion(System.Int32)">
            <summary>
            Gets the number of modules per side from the specified version.
            </summary>
            <param name="version">The version of the QR code (1 to 40, or -1 to -4 for Micro QR codes).</param>
            <returns>Returns the number of modules per side.</returns>
        </member>
        <member name="M:QRCoder.QRCodeData.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeData.Compression">
            <summary>
            Specifies the compression mode used for the raw data.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeData.Compression.Uncompressed">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeData.Compression.Deflate">
            <summary>
            Deflate compression.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeData.Compression.GZip">
            <summary>
            GZip compression.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator">
            <summary>
            Provides functionality to generate QR code data that can be used to create QR code images.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.#ctor">
            <summary>
            Initializes the QR code generator
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CreateQrCode(QRCoder.PayloadGenerator.Payload)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CreateQrCode(QRCoder.PayloadGenerator.Payload,QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CreateQrCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="plainText">The payload which shall be encoded in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <param name="forceUtf8">Shall the generator be forced to work in UTF-8 mode?</param>
            <param name="utf8BOM">Should the byte-order-mark be used?</param>
            <param name="eciMode">Which ECI mode shall be used?</param>
            <param name="requestedVersion">Set fixed QR code target version.</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CreateQrCode(System.Byte[],QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="binaryData">A byte array which shall be encoded/stored in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GenerateQrCode(QRCoder.PayloadGenerator.Payload)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GenerateQrCode(QRCoder.PayloadGenerator.Payload,QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GenerateQrCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="plainText">The payload which shall be encoded in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <param name="forceUtf8">Shall the generator be forced to work in UTF-8 mode?</param>
            <param name="utf8BOM">Should the byte-order-mark be used?</param>
            <param name="eciMode">Which ECI mode shall be used?</param>
            <param name="requestedVersion">Set fixed QR code target version.</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GenerateMicroQrCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            Calculates the Micro QR code data which then can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="plainText">The payload which shall be encoded in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <param name="requestedVersion">Set fixed Micro QR code target version; must be -1 to -4 representing M1 to M4, or 0 for default.</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GenerateQrCode(System.Byte[],QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="binaryData">A byte array which shall be encoded/stored in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ValidateECCLevel(QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Validates the specified error correction level.
            Returns the provided level if it is valid, or the level M if the provided level is Default.
            Throws an exception if an invalid level is provided.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GenerateQrCode(System.Collections.BitArray,QRCoder.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            Generates a QR code data structure using the provided BitArray, error correction level, and version.
            The BitArray provided is assumed to already include the count, encoding mode, and/or ECI mode information.
            </summary>
            <param name="bitArray">The BitArray containing the binary-encoded data to be included in the QR code. It should already contain the count, encoding mode, and/or ECI mode information.</param>
            <param name="eccLevel">The desired error correction level for the QR code. This impacts how much data can be recovered if damaged.</param>
            <param name="version">The version of the QR code, determining the size and complexity of the QR code data matrix.</param>
            <returns>A QRCodeData structure containing the full QR code matrix, which can be used for rendering or analysis.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GetFormatString(System.Collections.BitArray,System.Int32,QRCoder.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            Generates a BitArray containing the format string for a QR code based on the error correction level and mask pattern version.
            The format string includes the error correction level, mask pattern version, and error correction coding.
            </summary>
            <param name="fStrEcc">The <see cref="T:System.Collections.BitArray"/> to write to, or null to create a new one.</param>
            <param name="version">The version number of the QR Code (1-40, or -1 to -4 for Micro QR codes).</param>
            <param name="level">The error correction level to be encoded in the format string.</param>
            <param name="maskVersion">The mask pattern version to be encoded in the format string.</param>
            <returns>A BitArray containing the 15-bit format string used in QR code generation.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GetVersionString(System.Collections.BitArray,System.Int32)">
            <summary>
            Encodes the version information of a QR code into a BitArray using error correction coding similar to format information encoding.
            This method is used for QR codes version 7 and above.
            </summary>
            <param name="vStr">A <see cref="T:System.Collections.BitArray"/> to write the version string to.</param>
            <param name="version">The version number of the QR code (7-40).</param>
            <returns>A BitArray containing the encoded version information, which includes error correction bits.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CalculateECCWords(System.Collections.BitArray,System.Int32,System.Int32,QRCoder.QRCodeGenerator.ECCInfo,QRCoder.QRCodeGenerator.Polynom)">
            <summary>
            Calculates the Error Correction Codewords (ECC) for a segment of data using the provided ECC information.
            This method applies polynomial division, using the message polynomial and a generator polynomial,
            to compute the remainder which forms the ECC codewords.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ConvertToDecNotationInPlace(QRCoder.QRCodeGenerator.Polynom)">
            <summary>
            Converts all polynomial item coefficients from their alpha exponent notation to decimal representation in place.
            This conversion facilitates operations that require polynomial coefficients in their integer forms.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GetEncodingFromPlaintext(System.String,System.Boolean)">
            <summary>
            Determines the most efficient encoding mode for the given plain text based on its character content
            and a flag indicating whether to force UTF-8 encoding.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.IsInRange(System.Char,System.Char,System.Char)">
            <summary>
            Checks if a character falls within a specified range.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CalculateMessagePolynom(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
            Converts a segment of a BitArray representing QR code data into a polynomial,
            padding the final byte if necessary (for Micro QR variants like M1 or M3).
            </summary>
            <param name="bitArray">The full bit array representing encoded QR code data.</param>
            <param name="offset">Starting position in the bit array.</param>
            <param name="bitCount">Total number of bits to convert into codewords.</param>
            <returns>A polynomial representing the message codewords.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CalculateGeneratorPolynom(System.Int32)">
            <summary>
            Calculates the generator polynomial used for creating error correction codewords.
            </summary>
            <param name="numEccWords">The number of error correction codewords to generate.</param>
            <returns>A polynomial that can be used to generate ECC codewords.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.BinToDec(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
            Converts a segment of a BitArray into its decimal (integer) equivalent.
            </summary>
            <returns>The integer value that represents the specified binary data.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.DecToBin(System.Int32,System.Int32,System.Collections.BitArray,System.Int32)">
            <summary>
            Converts a decimal number to binary and stores the result in a BitArray starting from a specific index.
            </summary>
            <param name="decNum">The decimal number to convert to binary.</param>
            <param name="bits">The number of bits to use for the binary representation (ensuring fixed-width like 8, 16, 32 bits).</param>
            <param name="bitList">The BitArray where the binary bits will be stored.</param>
            <param name="index">The starting index in the BitArray where the bits will be stored.</param>
            <returns>The next index in the BitArray after the last bit placed.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GetCountIndicatorLength(System.Int32,QRCoder.QRCodeGenerator.EncodingMode)">
            <summary>
            Determines the number of bits used to indicate the count of characters in a segment, depending on the QR code version and the encoding mode.
            </summary>
            <param name="version">The version of the QR code, which influences the number of bits due to increasing data capacity.</param>
            <param name="encMode">The encoding mode (e.g., Numeric, Alphanumeric, Byte) used for the data segment.</param>
            <returns>The number of bits needed to represent the character count in the specified encoding mode and version.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GetDataLength(QRCoder.QRCodeGenerator.EncodingMode,System.String,System.Collections.BitArray,System.Boolean)">
            <summary>
            Calculates the data length based on the encoding mode, text content, and whether UTF-8 is forced.
            </summary>
            <param name="encoding">The encoding mode used for the QR code data.</param>
            <param name="plainText">The plain text input to be encoded.</param>
            <param name="codedText">A BitArray representing the binary data of the encoded text.</param>
            <param name="forceUtf8">Flag to determine if UTF-8 encoding should be enforced.</param>
            <returns>The length of data in units appropriate to the encoding (bytes or characters).</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.IsValidISO(System.String)">
            <summary>
            Checks if the given string can be accurately represented and retrieved in ISO-8859-1 encoding.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.PlainTextToBinary(System.String,QRCoder.QRCodeGenerator.EncodingMode,QRCoder.QRCodeGenerator.EciMode,System.Boolean,System.Boolean)">
            <summary>
            Converts plain text to a binary format suitable for QR code generation, based on the specified encoding mode.
            </summary>
            <param name="plainText">The text to be encoded.</param>
            <param name="encMode">The encoding mode.</param>
            <param name="eciMode">The ECI mode specifying the character encoding to use.</param>
            <param name="utf8BOM">Flag indicating whether to prepend a UTF-8 Byte Order Mark.</param>
            <param name="forceUtf8">Flag indicating whether UTF-8 encoding is forced.</param>
            <returns>A BitArray containing the binary representation of the encoded data.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.PlainTextToBinaryNumeric(System.String)">
            <summary>
            Converts numeric plain text into a binary format specifically optimized for QR codes.
            Numeric compression groups up to 3 digits into 10 bits, less for remaining digits if they do not complete a group of three.
            </summary>
            <param name="plainText">The numeric text to be encoded, which should only contain digit characters.</param>
            <returns>A BitArray representing the binary data of the encoded numeric text.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.PlainTextToBinaryByte(System.String,QRCoder.QRCodeGenerator.EciMode,System.Boolean,System.Boolean)">
            <summary>
            Converts plain text into a binary format using byte mode encoding, which supports various character encodings through ECI (Extended Channel Interpretations).
            </summary>
            <param name="plainText">The text to be encoded.</param>
            <param name="eciMode">The ECI mode that specifies the character encoding to use.</param>
            <param name="utf8BOM">Specifies whether to include a Byte Order Mark (BOM) for UTF-8 encoding.</param>
            <param name="forceUtf8">Forces UTF-8 encoding regardless of the text content's compatibility with ISO-8859-1.</param>
            <returns>A BitArray representing the binary data of the encoded text.</returns>
            <remarks>
            The returned text is always encoded as ISO-8859-1 unless either the text contains a non-ISO-8859-1 character or
            UTF-8 encoding is forced. This does not meet the QR Code standard, which requires the use of ECI to specify the encoding
            when not ISO-8859-1.
            </remarks>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ToBitArray(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into a BitArray, considering the proper bit order within each byte.
            Unlike the constructor of BitArray, this function preserves the MSB-to-LSB order within each byte.
            </summary>
            <param name="byteArray">The byte array to convert into a BitArray.</param>
            <param name="prefixZeros">The number of leading zeros to prepend to the resulting BitArray.</param>
            <returns>A BitArray representing the bits of the input byteArray, with optional leading zeros.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.XORPolynoms(QRCoder.QRCodeGenerator.Polynom,QRCoder.QRCodeGenerator.Polynom)">
            <summary>
            Performs a bitwise XOR operation between two polynomials, commonly used in QR code error correction coding.
            </summary>
            <returns>The resultant polynomial after performing the XOR operation.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.MultiplyGeneratorPolynomByLeadterm(QRCoder.QRCodeGenerator.Polynom,QRCoder.QRCodeGenerator.PolynomItem,System.Int32)">
            <summary>
            Multiplies a generator polynomial by a leading term polynomial, reducing the result by a specified lower exponent,
            used in constructing QR code error correction codewords.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.MultiplyAlphaPolynoms(QRCoder.QRCodeGenerator.Polynom,QRCoder.QRCodeGenerator.Polynom)">
            <summary>
            Multiplies two polynomials, treating coefficients as exponents of a primitive element (alpha), which is common in error correction algorithms such as Reed-Solomon.
            </summary>
            <param name="polynomBase">The first polynomial to multiply.</param>
            <param name="polynomMultiplier">The second polynomial to multiply.</param>
            <returns>A new polynomial which is the result of the multiplication of the two input polynomials.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.AlignmentPattern">
            <summary>
            Represents the alignment pattern used in QR codes, which helps ensure the code remains readable even if it is somewhat distorted.
            Each QR code version has its own specific alignment pattern locations which this struct encapsulates.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.AlignmentPattern.Version">
            <summary>
            The version of the QR code. Higher versions have more complex and numerous alignment patterns.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.AlignmentPattern.PatternPositions">
            <summary>
            A list of points where alignment patterns are located within the QR code matrix.
            Each point represents the center of an alignment pattern.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.AlignmentPatterns">
            <summary>
            This class contains the alignment patterns used in QR codes.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.AlignmentPatterns._alignmentPatternTable">
            <summary>
            A lookup table mapping QR code versions to their corresponding alignment patterns.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.AlignmentPatterns.FromVersion(System.Int32)">
            <summary>
            Retrieves the alignment pattern for a specific QR code version.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.AlignmentPatterns.CreateAlignmentPatternTable">
            <summary>
            Creates a lookup table mapping QR code versions to their corresponding alignment patterns.
            Alignment patterns are used in QR codes to help scanners accurately read the code at high speeds and when partially obscured.
            This table provides the necessary patterns based on the QR code version which dictates the size and complexity of the QR code.
            </summary>
            <returns>A dictionary where keys are QR code version numbers and values are AlignmentPattern structures detailing the positions of alignment patterns for each version.</returns>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.AlphanumericEncoder">
            <summary>
            Encodes alphanumeric characters (<c>0–9</c>, <c>A–Z</c> (uppercase), space, <c>$</c>, <c>%</c>, <c>*</c>, <c>+</c>, <c>-</c>, period, <c>/</c>, colon) into a binary format suitable for QR codes.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.AlphanumericEncoder._alphanumEncDict">
            <summary>
            A dictionary mapping alphanumeric characters to their respective positions used in QR code encoding.
            This includes digits 0-9, uppercase letters A-Z, and some special characters.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.AlphanumericEncoder.CreateAlphanumEncDict(System.Char[])">
            <summary>
            Creates a dictionary mapping alphanumeric characters to their respective positions used in QR code encoding.
            This includes digits 0-9, uppercase letters A-Z, and some special characters.
            </summary>
            <returns>A dictionary mapping each supported alphanumeric character to its corresponding value.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.AlphanumericEncoder.CanEncode(System.Char)">
            <summary>
            Checks if a character is present in the alphanumeric encoding table.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.AlphanumericEncoder.GetBitArray(System.String)">
            <summary>
            Converts alphanumeric plain text into a binary format optimized for QR codes.
            Alphanumeric encoding packs characters into 11-bit groups for each pair of characters,
            and 6 bits for a single remaining character if the total count is odd.
            </summary>
            <param name="plainText">The alphanumeric text to be encoded, which should only contain characters valid in QR alphanumeric mode.</param>
            <returns>A BitArray representing the binary data of the encoded alphanumeric text.</returns>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.CapacityTables">
            <summary>
            Provides QR code capacity and error correction data for each version and encoding mode.
            Used to determine how much data can be stored in a QR code and which version is required.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.CapacityTables._capacityTable">
            <summary>
            A list containing detailed capacity information for each version of QR codes.
            The index in the capacity table corresponds to one less than the version number.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.CapacityTables._capacityECCTable">
            <summary>
            A table containing the error correction capacities and data codeword information for different combinations of QR code versions and error correction levels.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.GetEccInfo(System.Int32,QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Retrieves the error correction information for a specific QR code version and error correction level.
            </summary>
            <param name="version">The version of the QR code (1 to 40, or -1 to -4 for M1 to M4).</param>
            <param name="eccLevel">The desired error correction level (L, M, Q, or H). Do not supply <see cref="F:QRCoder.QRCodeGenerator.ECCLevel.Default"/>.</param>
            <returns>
            An <see cref="T:QRCoder.QRCodeGenerator.ECCInfo"/> object containing the total number of data codewords, ECC per block, 
            block group details, and other parameters required for encoding error correction data.
            </returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.GetVersionInfo(System.Int32)">
            <summary>
            Retrieves the capacity information for a specific QR code version.
            The returned structure contains detailed data capacity values for each error correction level (L, M, Q, H)
            and encoding mode (Numeric, Alphanumeric, Byte, Kanji), indicating the maximum number of characters
            that can be stored in a QR code of the specified version under each configuration.
            </summary>
            <param name="version">The version of the QR code (1 to 40, or -1 to -4 for M1 to M4).</param>
            <returns>
            A <see cref="T:QRCoder.QRCodeGenerator.VersionInfo"/> object containing data capacity details for all error correction levels 
            and encoding modes for the specified version.
            </returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.GetRemainderBits(System.Int32)">
            <summary>
            Retrieves the number of remainder bits required for a specific QR code version.
            Remainder bits are added to the final bit stream to ensure proper alignment with byte boundaries,
            as required by the QR code specification.
            </summary>
            <param name="version">The version of the QR code (1 to 40, or -1 to -4 for M1 to M4).</param>
            <returns>
            The number of remainder bits (0 to 7) that must be appended to the encoded bit stream.
            </returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.CalculateMinimumVersion(System.Int32,QRCoder.QRCodeGenerator.EncodingMode,QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Determines the minimum QR code version required to encode a given amount of data with a specific encoding mode and error correction level.
            If no suitable version is found, it throws an exception indicating that the data length exceeds the maximum capacity for the given settings.
            </summary>
            <param name="length">The length of the data to be encoded.</param>
            <param name="encMode">The encoding mode (e.g., Numeric, Alphanumeric, Byte).</param>
            <param name="eccLevel">The error correction level (e.g., Low, Medium, Quartile, High).</param>
            <returns>The minimum version of the QR code that can accommodate the given data and settings.</returns>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">
            Thrown when the data length exceeds the maximum capacity for the specified encoding mode and error correction level.
            </exception>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.CalculateMinimumMicroVersion(System.Int32,QRCoder.QRCodeGenerator.EncodingMode,QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Determines the minimum Micro QR code version required to encode a given amount of data with a specific encoding mode and error correction level.
            If no suitable version is found, it throws an exception indicating that the data length exceeds the maximum capacity for the given settings.
            </summary>
            <param name="length">The length of the data to be encoded.</param>
            <param name="encMode">The encoding mode (e.g., Numeric, Alphanumeric, Byte).</param>
            <param name="eccLevel">The error correction level (e.g., Default, Low, Medium, Quartile, High).</param>
            <returns>The minimum version of the QR code (-1 to -4) that can accommodate the given data and settings.</returns>
            <exception cref="T:QRCoder.Exceptions.DataTooLongException">
            Thrown when the data length exceeds the maximum capacity for the specified encoding mode and error correction level.
            </exception>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.CreateCapacityECCTable(System.Int32[])">
            <summary>
            Generates a table containing the error correction capacities and data codeword information for different QR code versions and error correction levels.
            This table is essential for determining how much data can be encoded in a QR code of a specific version and ECC level,
            as well as how robust the QR code will be against distortions or obstructions.
            </summary>
            <returns>A list of ECCInfo structures, each representing the ECC data and capacities for different combinations of QR code versions and ECC levels.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.CreateCapacityTable(System.Int32[])">
            <summary>
            Generates a list containing detailed capacity information for various versions of QR codes.
            This table includes capacities for different encoding modes (numeric, alphanumeric, byte, etc.) under each error correction level.
            The capacity table is crucial for QR code generation, as it determines how much data each QR code version can store depending on the encoding mode and error correction level used.
            The index in the capacity table corresponds to one less than the version number.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CapacityTables.CreateMicroCapacityTable">
            <inheritdoc cref="M:QRCoder.QRCodeGenerator.CapacityTables.CreateCapacityTable(System.Int32[])"/>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.CodewordBlock">
            <summary>
            Represents a block of codewords in a QR code. QR codes are divided into several blocks for error correction purposes.
            Each block contains a series of data codewords followed by error correction codewords.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.CodewordBlock.#ctor(System.Int32,System.Int32,System.ArraySegment{System.Byte})">
            <summary>
            Initializes a new instance of the CodewordBlock struct with specified arrays of code words and error correction (ECC) words.
            </summary>
            <param name="codeWordsOffset">The offset of the data codewords within the main BitArray. Data codewords carry the actual information.</param>
            <param name="codeWordsLength">The length in bits of the data codewords within the main BitArray.</param>
            <param name="eccWords">The array of error correction codewords for this block. These codewords help recover the data if the QR code is damaged.</param>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.CodewordBlock.CodeWordsOffset">
            <summary>
            Gets the offset of the data codewords in the BitArray.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.CodewordBlock.CodeWordsLength">
            <summary>
            Gets the length of the data codewords in the BitArray.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.CodewordBlock.ECCWords">
            <summary>
            Gets the error correction codewords associated with this block.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.ECCInfo">
            <summary>
            Represents the error correction coding (ECC) information for a specific version and error correction level of a QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ECCInfo.#ctor(System.Int32,QRCoder.QRCodeGenerator.ECCLevel,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ECCInfo struct with specified properties.
            </summary>
            <param name="version">The version number of the QR code.</param>
            <param name="errorCorrectionLevel">The error correction level used in the QR code.</param>
            <param name="totalDataCodewords">The total number of data codewords for this version and error correction level.</param>
            <param name="eccPerBlock">The number of error correction codewords per block.</param>
            <param name="blocksInGroup1">The number of blocks in group 1.</param>
            <param name="codewordsInGroup1">The number of codewords in each block of group 1.</param>
            <param name="blocksInGroup2">The number of blocks in group 2, if any.</param>
            <param name="codewordsInGroup2">The number of codewords in each block of group 2, if any.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ECCInfo.#ctor(System.Int32,QRCoder.QRCodeGenerator.ECCLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ECCInfo struct with specified properties for Micro QR codes.
            </summary>
            <param name="version">The version number of the QR code.</param>
            <param name="errorCorrectionLevel">The error correction level used in the QR code.</param>
            <param name="totalDataCodewords">The total number of data codewords for this version and error correction level.</param>
            <param name="totalDataBits">The total number of data bits for this version and error correction level.</param>
            <param name="eccPerBlock">The number of error correction codewords per block.</param>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.Version">
            <summary>
            Gets the version number of the QR code.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.ErrorCorrectionLevel">
            <summary>
            Gets the error correction level of the QR code.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.TotalDataCodewords">
            <summary>
            Gets the total number of data codewords for this version and error correction level.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.TotalDataBits">
            <summary>
            Gets the total number of data codewords for this version and error correction level.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.ECCPerBlock">
            <summary>
            Gets the number of error correction codewords per block.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.BlocksInGroup1">
            <summary>
            Gets the number of blocks in group 1.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.CodewordsInGroup1">
            <summary>
            Gets the number of codewords in each block of group 1.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.BlocksInGroup2">
            <summary>
            Gets the number of blocks in group 2, if any.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.ECCInfo.CodewordsInGroup2">
            <summary>
            Gets the number of codewords in each block of group 2, if any.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.ECCLevel">
            <summary>
            Defines the levels of error correction available in QR codes.
            Each level specifies the proportion of data that can be recovered if the QR code is partially obscured or damaged.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.ECCLevel.Default">
            <summary>
            Default error correction level, which will select Level M (Medium) unless otherwise specified by the payload.
            Level M allows approximately 15% of data to be recovered, offering a balance between data capacity and error recovery.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.ECCLevel.L">
            <summary>
            Level L: Low error correction (approximately 7% of data can be recovered).
            This level allows the highest data density.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.ECCLevel.M">
            <summary>
            Level M: Medium error correction (approximately 15% of data can be recovered).
            Offers a balance between data capacity and error recovery.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.ECCLevel.Q">
            <summary>
            Level Q: Quartile error correction (approximately 25% of data can be recovered).
            More robust error correction at the cost of reduced data capacity.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.ECCLevel.H">
            <summary>
            Level H: High error correction (approximately 30% of data can be recovered).
            Provides the highest level of error recovery, ideal for environments with high risk of data loss.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.EciMode">
            <summary>
            Enumerates the Extended Channel Interpretation (ECI) modes used in QR codes to handle different character encoding standards.
            ECI mode allows QR codes to efficiently encode data using character sets other than the default ISO-8859-1.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EciMode.Default">
            <summary>
            Default encoding mode (typically ISO-8859-1). Used when no ECI mode is explicitly specified.
            This mode is assumed in basic QR codes where no extended character sets are needed.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EciMode.Iso8859_1">
            <summary>
            Specifies the use of the ISO-8859-1 character set, covering most Western European languages.
            This mode explicitly sets the encoding to ISO-8859-1, which includes characters used in languages such as English, French, German, and Spanish.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EciMode.Iso8859_2">
            <summary>
            Specifies the use of the ISO-8859-2 character set, which is primarily used for Central and Eastern European languages.
            This includes characters used in languages such as Polish, Czech, Slovak, Hungarian, and Romanian.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EciMode.Utf8">
            <summary>
            Specifies the use of UTF-8 encoding.
            UTF-8 can encode any Unicode character and is useful for QR codes that need to support multi-language content.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.EncodingMode">
            <summary>
            Specifies the encoding modes for the characters in a QR code.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EncodingMode.Numeric">
            <summary>
            Numeric encoding mode, which is used to encode numeric data (digits 0-9).
            Three characters are encoded into 10 bits.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EncodingMode.Alphanumeric">
            <summary>
            Alphanumeric encoding mode, which is used to encode alphanumeric characters (0-9, A-Z, space, and some punctuation).
            Two characters are encoded into 11 bits.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EncodingMode.Byte">
            <summary>
            Byte encoding mode, primarily using the ISO-8859-1 character set. Each character is encoded into 8 bits.
            When combined with ECI, it can be adapted to use other character sets.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EncodingMode.Kanji">
            <summary>
            Kanji encoding mode, which is used to encode characters from the Shift JIS character set, primarily for Japanese Kanji and Kana characters.
            One character is encoded into 13 bits. This mode is not currently supported by QRCoder.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.EncodingMode.ECI">
            <summary>
            Extended Channel Interpretation (ECI) mode, which specifies a character set via an 8-bit number followed by one of the other encoding modes.
            This allows adapting the byte encoding to accommodate various global text encodings.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.GaloisField">
            <summary>
            Represents a Galois field of 256 elements (GF(256)) used in finite field arithmetic,
            typically for error correction algorithms such as Reed-Solomon.
            <para>
            Provides mappings between exponential and integer representations of field elements
            using a primitive element (α). The field is constructed with respect to a generator
            polynomial and used for efficient encoding and decoding operations.
            </para>
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GaloisField.GetIntValFromAlphaExp(System.Int32)">
            <summary>
            Retrieves the integer value from the Galois field that corresponds to a given exponent.
            This is used in Reed-Solomon and other error correction calculations involving Galois fields.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GaloisField.GetAlphaExpFromIntVal(System.Int32)">
            <summary>
            Retrieves the exponent from the Galois field that corresponds to a given integer value.
            Throws an exception if the integer value is zero, as zero does not have a logarithmic representation in the field.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.GaloisField.ShrinkAlphaExp(System.Int32)">
            <summary>
            Normalizes a Galois field exponent to ensure it remains within the bounds of the field's size.
            This is particularly necessary when performing multiplications in the field which can result in exponents exceeding the field's maximum.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules">
            <summary>
            Struct that represents blocked modules using rectangles.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules"/> struct with a specified size.
            </summary>
            <param name="size">The size of the blocked modules matrix.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules.Add(System.Int32,System.Int32)">
            <summary>
            Adds a blocked module at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the module.</param>
            <param name="y">The y-coordinate of the module.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules.Add(QRCoder.QRCodeGenerator.Rectangle)">
            <summary>
            Adds a blocked module defined by the specified rectangle.
            </summary>
            <param name="rect">The rectangle that defines the blocked module.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules.IsBlocked(System.Int32,System.Int32)">
            <summary>
            Checks if the specified coordinates are blocked.
            </summary>
            <param name="x">The x-coordinate to check.</param>
            <param name="y">The y-coordinate to check.</param>
            <returns><c>true</c> if the coordinates are blocked; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules.IsBlocked(QRCoder.QRCodeGenerator.Rectangle)">
            <summary>
            Checks if the specified rectangle is blocked.
            </summary>
            <param name="r1">The rectangle to check.</param>
            <returns><c>true</c> if the rectangle is blocked; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceVersion(QRCoder.QRCodeData,System.Collections.BitArray,System.Boolean)">
            <summary>
            Places the version information on the QR code matrix for versions 7 and higher. Version information
            is encoded into two small rectangular areas near the bottom left and top right corners outside the timing patterns.
            </summary>
            <param name="qrCode">The QR code data structure to modify.</param>
            <param name="versionStr">The bit array containing the version information.</param>
            <param name="offset">Indicates whether an offset should be applied to the version information placement.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceFormat(QRCoder.QRCodeData,System.Collections.BitArray,System.Boolean)">
            <summary>
            Places the format information on the QR code, encoding the error correction level and mask pattern used.
            </summary>
            <param name="qrCode">The QR code data structure to modify.</param>
            <param name="formatStr">The bit array containing the format information.</param>
            <param name="offset">Specifies whether an offset should be applied.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskCode(QRCoder.QRCodeData,System.Int32,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules,QRCoder.QRCodeGenerator.ECCLevel)">
            <summary>
            Applies the most effective mask pattern to the QR code based on minimizing the penalty score,
            which evaluates how well the pattern will work for QR scanners.
            </summary>
            <param name="qrCode">The QR code data structure where the mask will be applied.</param>
            <param name="version">The version of the QR code, which determines the size and complexity.</param>
            <param name="blockedModules">List of rectangles representing areas that must not be overwritten.</param>
            <param name="eccLevel">The error correction level of the QR code, which affects format string values.</param>
            <returns>The index of the selected mask pattern.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceDataWords(QRCoder.QRCodeData,System.Collections.BitArray,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Places data bits into the QR code's module matrix following a specific pattern that navigates around blocked modules.
            </summary>
            <param name="qrCode">The QR code data structure where the data bits are to be placed.</param>
            <param name="data">The data bits to be placed within the QR code matrix.</param>
            <param name="blockedModules">A list of rectangles representing areas within the QR code matrix that should not be modified because they contain other necessary information like format and version info.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.ReserveSeperatorAreas(System.Int32,System.Int32,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Reserves separator areas around the positioning patterns of a QR code to ensure that these crucial areas remain unmodified during data placement.
            </summary>
            <param name="version">The version of the QR code, which determines the number of finder patterns.</param>
            <param name="size">The size of the QR code matrix.</param>
            <param name="blockedModules">A list of rectangles representing areas that must not be overwritten.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.ReserveVersionAreas(System.Int32,System.Int32,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Reserves areas for version information on QR codes that are version 7 or higher. Also reserves space for format information.
            </summary>
            <param name="size">The size of the QR code matrix.</param>
            <param name="version">The version number of the QR code, which determines the placement of version information.</param>
            <param name="blockedModules">A list of rectangles representing areas that must not be overwritten.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceDarkModule(QRCoder.QRCodeData,System.Int32,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Places a dark module on the QR code matrix as per QR code specification, which requires a dark module at a specific position for all QR codes.
            </summary>
            <param name="qrCode">The QR code data structure where the dark module is to be placed.</param>
            <param name="version">The version number of the QR code, which determines the specific location of the dark module.</param>
            <param name="blockedModules">A list of rectangles representing areas that must not be overwritten, updated to include the dark module.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceFinderPatterns(QRCoder.QRCodeData,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Places finder patterns on the QR code. Finder patterns are critical for QR code scanners to correctly orient and recognize the QR code.
            </summary>
            <param name="qrCode">The QR code data structure where the finder patterns will be placed.</param>
            <param name="blockedModules">A list of rectangles representing areas that must not be overwritten. This is updated with the areas occupied by the finder patterns.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceAlignmentPatterns(QRCoder.QRCodeData,System.Collections.Generic.List{QRCoder.QRCodeGenerator.Point},QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Places alignment patterns on the QR code matrix. Alignment patterns help ensure the scanner can correctly interpret the QR code at various scales and orientations.
            </summary>
            <param name="qrCode">The QR code data structure where the alignment patterns will be placed.</param>
            <param name="alignmentPatternLocations">A list of points representing the centers of where alignment patterns should be placed.</param>
            <param name="blockedModules">A list of rectangles representing areas that must not be overwritten. Updated with the areas occupied by alignment patterns.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.PlaceTimingPatterns(QRCoder.QRCodeData,QRCoder.QRCodeGenerator.ModulePlacer.BlockedModules)">
            <summary>
            Places timing patterns in the QR code. Timing patterns are alternating dark and light modules that help scanners determine the coordinates of modules within the QR code.
            </summary>
            <param name="qrCode">The QR code data structure where the timing patterns will be placed.</param>
            <param name="blockedModules">A list of rectangles representing areas that must not be overwritten. Updated with the areas occupied by timing patterns.</param>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern">
            <summary>
            Provides static methods and properties to handle mask patterns used in QR code generation.
            Mask patterns are applied to QR codes to break up patterns in the data matrix that might confuse scanners.
            </summary>
        </member>
        <member name="F:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Patterns">
            <summary>
            A dictionary mapping each mask pattern index to its corresponding function that calculates whether a given pixel should be masked.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern1(System.Int32,System.Int32)">
            <summary>
            Mask pattern 1: (x + y) % 2 == 0
            Applies a checkerboard mask on the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern2(System.Int32,System.Int32)">
            <summary>
            Mask pattern 2: y % 2 == 0
            Applies a horizontal striping mask on the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern3(System.Int32,System.Int32)">
            <summary>
            Mask pattern 3: x % 3 == 0
            Applies a vertical striping mask on the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern4(System.Int32,System.Int32)">
            <summary>
            Mask pattern 4: (x + y) % 3 == 0
            Applies a diagonal striping mask on the QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern5(System.Int32,System.Int32)">
            <summary>
            Mask pattern 5: ((y / 2) + (x / 3)) % 2 == 0
            Applies a complex pattern mask on the QR code, mixing horizontal and vertical rules.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern6(System.Int32,System.Int32)">
            <summary>
            Mask pattern 6: ((x * y) % 2 + (x * y) % 3) == 0
            Applies a mask based on the product of x and y coordinates modulo 2 and 3.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern7(System.Int32,System.Int32)">
            <summary>
            Mask pattern 7: (((x * y) % 2 + (x * y) % 3) % 2) == 0
            Applies a mask based on a more complex function involving the product of x and y coordinates.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Pattern8(System.Int32,System.Int32)">
            <summary>
            Mask pattern 8: (((x + y) % 2) + ((x * y) % 3) % 2) == 0
            Combines rules of checkers and complex multiplicative masks.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.ScoreMicro(QRCoder.QRCodeData)">
            <summary>
            Calculates a penalty score for a Micro QR code to evaluate the effectiveness of a mask pattern.
            A lower score indicates a QR code that is easier for decoders to read accurately.
            </summary>
            <param name="qrCode">The QR code data structure to be evaluated.</param>
            <returns>The total penalty score of the QR code.</returns>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.ModulePlacer.MaskPattern.Score(QRCoder.QRCodeData)">
            <summary>
            Calculates a penalty score for a QR code to evaluate the effectiveness of a mask pattern.
            A lower score indicates a QR code that is easier for decoders to read accurately.
            The score is the sum of four penalty rules applied to the QR code.
            </summary>
            <param name="qrCode">The QR code data structure to be evaluated.</param>
            <returns>The total penalty score of the QR code.</returns>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.Point">
            <summary>
            Represents a 2D point with integer coordinates.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Point.X">
            <summary>
            Gets the X-coordinate of the point.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Point.Y">
            <summary>
            Gets the Y-coordinate of the point.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.Point"/> struct with specified X and Y coordinates.
            </summary>
            <param name="x">The X-coordinate of the point.</param>
            <param name="y">The Y-coordinate of the point.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Point.Equals(QRCoder.QRCodeGenerator.Point)">
            <summary>
            Determines whether the specified <see cref="T:QRCoder.QRCodeGenerator.Point"/> is equal to the current <see cref="T:QRCoder.QRCodeGenerator.Point"/>.
            </summary>
            <param name="other">The <see cref="T:QRCoder.QRCodeGenerator.Point"/> to compare with the current <see cref="T:QRCoder.QRCodeGenerator.Point"/>.</param>
            <returns>True if the specified <see cref="T:QRCoder.QRCodeGenerator.Point"/> has the same X and Y coordinates as the current <see cref="T:QRCoder.QRCodeGenerator.Point"/>; otherwise, false.</returns>
            <remarks>
            If this method which implements <see cref="M:System.IEquatable`1.Equals(`0)"/> is not implemented, comparisons used by methods such as <see cref="M:System.Collections.Generic.List`1.Contains(`0)"/>
            fall back to reflection, which causes heap allocations internally during the calls to <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Point.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Point.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.Polynom">
            <summary>
            Represents a polynomial, which is a sum of polynomial terms.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.Polynom"/> struct with a specified number of initial capacity for polynomial terms.
            </summary>
            <param name="count">The initial capacity of the polynomial items list.</param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.Add(QRCoder.QRCodeGenerator.PolynomItem)">
            <summary>
            Adds a polynomial term to the polynomial.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.RemoveAt(System.Int32)">
            <summary>
            Removes the polynomial term at the specified index.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Polynom.Item(System.Int32)">
            <summary>
            Gets or sets a polynomial term at the specified index.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Polynom.Count">
            <summary>
            Gets the number of polynomial terms in the polynomial.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.Clear">
            <summary>
            Removes all polynomial terms from the polynomial.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.Clone">
            <summary>
            Clones the polynomial, creating a new instance with the same polynomial terms.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.Sort(System.Func{QRCoder.QRCodeGenerator.PolynomItem,QRCoder.QRCodeGenerator.PolynomItem,System.Int32})">
            <summary>
            Sorts the collection of <see cref="T:QRCoder.QRCodeGenerator.PolynomItem"/> using a custom comparer function.
            </summary>
            <param name="comparer">
            A function that compares two <see cref="T:QRCoder.QRCodeGenerator.PolynomItem"/> objects and returns an integer indicating their relative order:
            less than zero if the first is less than the second, zero if they are equal, or greater than zero if the first is greater than the second.
            </param>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.ToString">
            <summary>
            Returns a string that represents the polynomial in standard algebraic notation.
            Example output: "a^2*x^3 + a^5*x^1 + a^3*x^0", which represents the polynomial 2x³ + 5x + 3.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.AssertCapacity(System.Int32)">
            <summary>
            Ensures that the polynomial has enough capacity to store the specified number of polynomial terms.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.RentArray(System.Int32)">
            <summary>
            Rents memory for the polynomial terms from a shared memory pool.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.ReturnArray(QRCoder.QRCodeGenerator.PolynomItem[])">
            <summary>
            Returns memory allocated for the polynomial terms back to a shared memory pool.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Polynom.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the polynomial terms.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.Polynom.PolynumEnumerator">
            <summary>
            Value type enumerator for the <see cref="T:QRCoder.QRCodeGenerator.Polynom"/> struct.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.PolynomItem">
            <summary>
            Represents an individual term of a polynomial, consisting of a coefficient and an exponent.
            For example, the term 3x² would be represented as a <see cref="T:QRCoder.QRCodeGenerator.PolynomItem"/> with a coefficient of 3 and an exponent of 2.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.PolynomItem.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.PolynomItem"/> struct with the specified coefficient and exponent.
            </summary>
            <param name="coefficient">The coefficient of the polynomial term. For example, in the term 3x², the coefficient is 3.</param>
            <param name="exponent">The exponent of the polynomial term. For example, in the term 3x², the exponent is 2.</param>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.PolynomItem.Coefficient">
            <summary>
            Gets the coefficient of the polynomial term.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.PolynomItem.Exponent">
            <summary>
            Gets the exponent of the polynomial term.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.Rectangle">
            <summary>
            Represents a rectangle defined by its top-left corner's coordinates, width, and height.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Rectangle.X">
            <summary>
            Gets the X-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Rectangle.Y">
            <summary>
            Gets the Y-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Rectangle.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.Rectangle.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.Rectangle"/> struct with the specified top-left corner coordinates, width, and height.
            </summary>
            <param name="x">The X-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The Y-coordinate of the top-left corner of the rectangle.</param>
            <param name="w">The width of the rectangle.</param>
            <param name="h">The height of the rectangle.</param>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.VersionInfo">
            <summary>
            Represents version-specific information of a QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.VersionInfo.#ctor(System.Int32,System.Collections.Generic.List{QRCoder.QRCodeGenerator.VersionInfoDetails})">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.VersionInfo"/> struct with a specific version number and its details.
            </summary>
            <param name="version">The version number of the QR code. Each version has a different module configuration.</param>
            <param name="versionInfoDetails">A list of detailed information related to error correction levels and capacity for each encoding mode.</param>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.VersionInfo.Version">
            <summary>
            Gets the version number of the QR code. Each version number specifies a different size of the QR matrix.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.VersionInfo.Details">
            <summary>
            Gets a list of details about the QR code version, including the error correction levels and encoding capacities.
            </summary>
        </member>
        <member name="T:QRCoder.QRCodeGenerator.VersionInfoDetails">
            <summary>
            Represents the detailed information about each error correction level and its corresponding capacities in different encoding modes for a specific version of a QR code.
            </summary>
        </member>
        <member name="M:QRCoder.QRCodeGenerator.VersionInfoDetails.#ctor(QRCoder.QRCodeGenerator.ECCLevel,System.Collections.Generic.Dictionary{QRCoder.QRCodeGenerator.EncodingMode,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.QRCodeGenerator.VersionInfoDetails"/> struct, detailing the error correction level and the capacity for each encoding mode.
            </summary>
            <param name="errorCorrectionLevel">The error correction level, which determines how much of the code can be restored if the QR code gets damaged.</param>
            <param name="capacityDict">A dictionary mapping each encoding mode to its capacity for the specific error correction level.</param>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.VersionInfoDetails.ErrorCorrectionLevel">
            <summary>
            Gets the error correction level of the QR code, influencing how robust the QR code is against errors and damage.
            </summary>
        </member>
        <member name="P:QRCoder.QRCodeGenerator.VersionInfoDetails.CapacityDict">
            <summary>
            Gets a dictionary that contains the capacities of different encoding modes under the specified error correction level.
            These capacities dictate how many characters can be encoded under each mode.
            </summary>
        </member>
        <member name="T:QRCoder.SvgQRCode">
            <summary>
            Represents a QR code generator that outputs QR codes as SVG images.
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.SvgQRCode"/> class.
            Constructor without parameters to be used in COM objects connections.
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.#ctor(QRCoder.QRCodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:QRCoder.SvgQRCode"/> class with the specified <see cref="T:QRCoder.QRCodeData"/>.
            </summary>
            <param name="data"><see cref="T:QRCoder.QRCodeData"/> generated by the QRCodeGenerator.</param>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic">
            <summary>
            Returns a scalable QR code as an SVG string.
            </summary>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic(System.Int32)">
            <summary>
            Returns a QR code as an SVG string.
            </summary>
            <param name="pixelsPerModule">The pixel size each dark/light module is drawn.</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,QRCoder.SvgQRCode.SizingMode,QRCoder.SvgQRCode.SvgLogo)">
            <summary>
            Returns a QR code as an SVG string with custom colors, optional quiet zones, and an optional logo.
            </summary>
            <param name="pixelsPerModule">The pixel size each dark/light module is drawn; applicable only when <paramref name="sizingMode"/> is <see cref="F:QRCoder.SvgQRCode.SizingMode.WidthHeightAttribute"/>.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">If true, a white border is drawn around the entire QR code.</param>
            <param name="sizingMode">Defines whether width/height or viewBox should be used for size definition.</param>
            <param name="logo">An optional logo to be rendered on the code (either Bitmap or SVG).</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,QRCoder.SvgQRCode.SizingMode,QRCoder.SvgQRCode.SvgLogo)">
            <summary>
            Returns a QR code as an SVG string with custom colors (in HEX syntax), optional quiet zones, and an optional logo.
            </summary>
            <param name="pixelsPerModule">The pixel size each dark/light module is drawn; applicable only when <paramref name="sizingMode"/> is <see cref="F:QRCoder.SvgQRCode.SizingMode.WidthHeightAttribute"/>.</param>
            <param name="darkColorHex">The color of the dark/black modules in HEX format (e.g., #000000).</param>
            <param name="lightColorHex">The color of the light/white modules in HEX format (e.g., #ffffff).</param>
            <param name="drawQuietZones">If true, a white border is drawn around the entire QR code.</param>
            <param name="sizingMode">Defines whether width/height or viewBox should be used for size definition.</param>
            <param name="logo">An optional logo to be rendered on the code (either Bitmap or SVG).</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic(System.Drawing.Size,System.Boolean,QRCoder.SvgQRCode.SizingMode,QRCoder.SvgQRCode.SvgLogo)">
            <summary>
            Returns a QR code as an SVG string with optional quiet zones and an optional logo.
            </summary>
            <param name="viewBox">The width and height for the SVG when <paramref name="sizingMode"/> is <see cref="F:QRCoder.SvgQRCode.SizingMode.WidthHeightAttribute"/>; unused otherwise.</param>
            <param name="drawQuietZones">If true, a white border is drawn around the entire QR code.</param>
            <param name="sizingMode">Defines whether width/height or viewBox should be used for size definition.</param>
            <param name="logo">An optional logo to be rendered on the code (either Bitmap or SVG).</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic(System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Boolean,QRCoder.SvgQRCode.SizingMode,QRCoder.SvgQRCode.SvgLogo)">
            <summary>
            Returns a QR code as an SVG string with custom colors and optional quiet zones and an optional logo.
            </summary>
            <param name="viewBox">The width and height for the SVG when <paramref name="sizingMode"/> is <see cref="F:QRCoder.SvgQRCode.SizingMode.WidthHeightAttribute"/>; unused otherwise.</param>
            <param name="darkColor">The color of the dark modules.</param>
            <param name="lightColor">The color of the light modules.</param>
            <param name="drawQuietZones">If true, a white border is drawn around the entire QR code.</param>
            <param name="sizingMode">Defines whether width/height or viewBox should be used for size definition.</param>
            <param name="logo">An optional logo to be rendered on the code (either Bitmap or SVG).</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetGraphic(System.Drawing.Size,System.String,System.String,System.Boolean,QRCoder.SvgQRCode.SizingMode,QRCoder.SvgQRCode.SvgLogo)">
            <summary>
            Returns a QR code as an SVG string with custom colors (in HEX syntax), optional quiet zones, and an optional logo.
            </summary>
            <param name="viewBox">The width and height for the SVG when <paramref name="sizingMode"/> is <see cref="F:QRCoder.SvgQRCode.SizingMode.WidthHeightAttribute"/>; unused otherwise.</param>
            <param name="darkColorHex">The color of the dark/black modules in HEX format (e.g., #000000).</param>
            <param name="lightColorHex">The color of the light/white modules in HEX format (e.g., #ffffff).</param>
            <param name="drawQuietZones">If true, a white border is drawn around the entire QR code.</param>
            <param name="sizingMode">Defines whether width/height or viewBox should be used for size definition.</param>
            <param name="logo">An optional logo to be rendered on the code (either Bitmap or SVG).</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.IsBlockedByLogo(System.Int32,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Determines if a module at (x,y) is blocked by the logo area defined by attr.
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetLogoAttributes(QRCoder.SvgQRCode.SvgLogo,System.Drawing.Size)">
            <summary>
            Calculates the logo's position and size within the QR code based on the specified percentage size.
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.GetTransparency(System.String)">
            <summary>
            Gets the transparency value (0-255) from a color string.
            </summary>
            <param name="colorHex">The color string in hex format (e.g., #RRGGBB, #RRGGBBAA) or the literal "transparent".</param>
            <returns>The alpha/transparency value from 0 (fully transparent) to 255 (fully opaque). Returns 255 for colors without alpha channel.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.IsPartiallyTransparent(System.String)">
            <summary>
            Determines if a color string represents a partially transparent color.
            </summary>
            <param name="colorHex">The color string in hex format (e.g., #RRGGBB, #RRGGBBAA) or the literal "transparent".</param>
            <returns>True if the color is transparent; otherwise false.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.IsFullyTransparent(System.String)">
            <summary>
            Determines if a color string represents a fully transparent color.
            </summary>
            <param name="colorHex">The color string in hex format (e.g., #RRGGBB, #RRGGBBAA) or the literal "transparent".</param>
            <returns>True if the color is fully transparent; otherwise false.</returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.ColorToHex(System.Drawing.Color)">
            <summary>
            Converts a Color to a hex string in #RGB, #RRGGBB or #RRGGBBAA format; or 'transparent' for fully transparent colors.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A hex string representation of the color.</returns>
        </member>
        <member name="T:QRCoder.SvgQRCode.SizingMode">
            <summary>
            Mode of sizing attribute on SVG root node
            </summary>
        </member>
        <member name="F:QRCoder.SvgQRCode.SizingMode.WidthHeightAttribute">
            <summary>
            Specifies width and height attributes for SVG sizing
            </summary>
        </member>
        <member name="F:QRCoder.SvgQRCode.SizingMode.ViewBoxAttribute">
            <summary>
            Width and height are not included within the SVG tag; viewBox is scaled to fit the container
            </summary>
        </member>
        <member name="T:QRCoder.SvgQRCode.SvgLogo">
            <summary>
            Represents a logo graphic that can be rendered on a SvgQRCode
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.#ctor(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
            Create a logo object to be used in SvgQRCode renderer
            </summary>
            <param name="iconRasterized">Logo to be rendered as Bitmap/rasterized graphic</param>
            <param name="iconSizePercent">Degree of percentage coverage of the QR code by the logo</param>
            <param name="fillLogoBackground">If true, the background behind the logo will be cleaned</param>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a logo object to be used in SvgQRCode renderer
            </summary>
            <param name="iconVectorized">Logo to be rendered as SVG/vectorized graphic/string</param>
            <param name="iconSizePercent">Degree of percentage coverage of the QR code by the logo</param>
            <param name="fillLogoBackground">If true, the background behind the logo will be cleaned</param>
            <param name="iconEmbedded">If true, the logo will embedded as native svg instead of embedding it as image-tag</param>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.#ctor(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Create a logo object to be used in SvgQRCode renderer
            </summary>
            <param name="iconRasterized">Logo to be rendered as PNG</param>
            <param name="iconSizePercent">Degree of percentage coverage of the QR code by the logo</param>
            <param name="fillLogoBackground">If true, the background behind the logo will be cleaned</param>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.GetRawLogo">
            <summary>
            Returns the raw logo's data
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.IsEmbedded">
            <summary>
            Defines, if the logo shall be natively embedded.
            true=native svg embedding, false=embedding via image-tag
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.GetMediaType">
            <summary>
            Returns the media type of the logo
            </summary>
            <returns></returns>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.GetDataUri">
            <summary>
            Returns the logo as data-uri
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.GetIconSizePercent">
            <summary>
            Returns how much of the QR code should be covered by the logo (in percent)
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCode.SvgLogo.FillLogoBackground">
            <summary>
            Returns if the background of the logo should be cleaned (no QR modules will be rendered behind the logo)
            </summary>
        </member>
        <member name="T:QRCoder.SvgQRCode.SvgLogo.MediaType">
            <summary>
            Media types for SvgLogos
            </summary>
        </member>
        <member name="F:QRCoder.SvgQRCode.SvgLogo.MediaType.PNG">
            <summary>
            Portable Network Graphics (PNG) image format
            </summary>
        </member>
        <member name="F:QRCoder.SvgQRCode.SvgLogo.MediaType.SVG">
            <summary>
            Scalable Vector Graphics (SVG) image format
            </summary>
        </member>
        <member name="T:QRCoder.SvgQRCodeHelper">
            <summary>
            Provides static methods for creating SVG QR codes.
            </summary>
        </member>
        <member name="M:QRCoder.SvgQRCodeHelper.GetQRCode(System.String,System.Int32,System.String,System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,QRCoder.QRCodeGenerator.EciMode,System.Int32,System.Boolean,QRCoder.SvgQRCode.SizingMode,QRCoder.SvgQRCode.SvgLogo)">
            <summary>
            Creates an SVG QR code with a single function call.
            </summary>
            <param name="plainText">The text or payload to be encoded inside the QR code.</param>
            <param name="pixelsPerModule">The pixel size each dark/light module of the QR code will occupy in the final QR code image.</param>
            <param name="darkColorHex">The color of the dark modules in HEX format (e.g., #000000).</param>
            <param name="lightColorHex">The color of the light modules in HEX format (e.g., #ffffff).</param>
            <param name="eccLevel">The level of error correction data.</param>
            <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
            <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
            <param name="eciMode">Specifies which ECI mode should be used.</param>
            <param name="requestedVersion">Sets the fixed QR code target version.</param>
            <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
            <param name="sizingMode">Defines whether width/height or viewBox should be used for size definition.</param>
            <param name="logo">An optional logo to be rendered on the code (either Bitmap or SVG).</param>
            <returns>Returns the QR code graphic as an SVG string.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition. If the method returns this value, the associated
            parameter will not be null.
            </summary>
        </member>
    </members>
</doc>
